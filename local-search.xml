<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>docker</title>
    <link href="/2023/06/23/docker/"/>
    <url>/2023/06/23/docker/</url>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/06/29/bnXgrjtzkx7YaLo.png" alt="image-20220629215534772"></p><h1 id="Docker容器技术"><a href="#Docker容器技术" class="headerlink" title="Docker容器技术"></a>Docker容器技术</h1><p>Docker是一门平台级别的技术，涉及的范围很广，所以，在开始之前，请确保你完成：<strong>Java SpringBoot 篇</strong>（推荐完成SpringCloud篇再来）视频教程及之前全部路线，否则学习会非常吃力，另外推荐额外掌握：《计算机网络》、《操作系统》相关知识。学一样东西不能完全靠记忆来完成，而是需要结合自己所学的基础知识加以理解，一般来说，单凭记忆能够掌握的东西往往是最廉价的。</p><p><strong>Docker官网：</strong><a href="https://www.docker.com/">https://www.docker.com</a></p><p><strong>课前准备：</strong>配置2C2G以上Linux服务器一台，云服务器、虚拟机均可。</p><h2 id="容器技术入门"><a href="#容器技术入门" class="headerlink" title="容器技术入门"></a>容器技术入门</h2><p>随着时代的发展，Docker也逐渐走上了历史舞台，曾经我们想要安装一套环境，需要花费一下午甚至一整天来配置和安装各个部分（比如运行我们自己的SpringBoot应用程序，可能需要安装数据库、安Redis、安装MQ等，各种各样的环境光是安装就要花费很多时间，真的是搞得心态爆炸），而有了Docker之后，我们的程序和环境部署就变得非常简单了，我们只需要将这些环境一起打包成一个镜像。而到服务器上部署时，可以直接下载镜像实现一键部署，是不是很方便？</p><p>包括我们在学习SpringCloud需要配置的各种组件，可能在自己电脑的环境中运行会遇到各种各样的问题（可能由于电脑上各种环境没配置，导致无法运行），而现在只需要下载镜像就能直接运行，所有的环境全部在镜像中配置完成，开箱即用。</p><p>真的有这么神奇吗？我们来试试看。</p><h3 id="环境安装和部署"><a href="#环境安装和部署" class="headerlink" title="环境安装和部署"></a>环境安装和部署</h3><p>首先我们还是先将Docker环境搭建好（建议和我同一个环境，不然出了问题只能自己想办法了），这里我们使用：</p><ul><li>Ubuntu 22.04 操作系统</li></ul><p>Docker分为免费的CE（Community Edition）社区版本和EE（Enterprise Edition）企级付费版本，所以我们这里选择docker-ce进行安装。官方安装文档：<a href="https://docs.docker.com/engine/install/ubuntu/">https://docs.docker.com/engine/install/ubuntu/</a></p><p>首先安装一些工具：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> ca-certificates <span class="token function">curl</span> gnupg lsb-release<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>不过在Ubuntu22.04已经默认安装好了。接着安装官方的GPG key：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/apt/keyrings<span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://download.docker.com/linux/ubuntu/gpg <span class="token operator">|</span> <span class="token function">sudo</span> gpg <span class="token parameter variable">--dearmor</span> <span class="token parameter variable">-o</span> /etc/apt/keyrings/docker.gpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>最后将Docker的库添加到apt资源列表中：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"deb [arch=<span class="token variable"><span class="token variable">$(</span>dpkg --print-architecture<span class="token variable">)</span></span> signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu <span class="token variable"><span class="token variable">$(</span>lsb_release <span class="token parameter variable">-cs</span><span class="token variable">)</span></span> stable"</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/apt/sources.list.d/docker.list <span class="token operator">></span> /dev/null<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>接着我们更新一次apt：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>最后安装Docker CE版本：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> docker-ce<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>等待安装完成就可以了：</p><p><img src="https://s2.loli.net/2022/06/30/D1GXAQdUsgmTawq.png" alt="image-20220630161240162"></p><p><img src="https://s2.loli.net/2022/06/30/oI26yQiqhABN3UP.png" alt="image-20220630161341541"></p><p>可以看到安装成功后版本是20.10.17，当然可能你们安装的时候就是更新的版本了。最后我们将当前用户添加到docker用户组中，不然每次使用docker命令都需要sudo执行，很麻烦：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">usermod</span> <span class="token parameter variable">-aG</span> <span class="token function">docker</span> <span class="token operator">&lt;</span>用户名<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>配置好后，我们先退出SSH终端，然后重新连接就可以生效了。</p><p>这样我们Docker 的学习环境就配置好了，现在我们就尝试通过Docker来部署一个Nginx服务器试试看，使用很简单，只需要一个命令就可以了（当然现在看不懂没关系，我们后面会细嗦）：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="https://s2.loli.net/2022/06/30/sPVpLI9bXlzdKeO.png" alt="image-20220630165259663"></p><p>首选它会从镜像仓库中下载对应的镜像，国内访问速度还行，不需要单独配置镜像源。接着下载完成后，就会在后台运行了，我们可以使用浏览器访问试试看：</p><p><img src="https://s2.loli.net/2022/06/30/fP5TsQnqUbmXoaA.png" alt="image-20220630165430159"></p><p><img src="https://s2.loli.net/2022/06/30/lPZYrUn2D1gNjx8.png" alt="image-20220630165440751"></p><p>可以看到，Nginx服务器已经成功部署了，但是实际上我们并没有在Ubuntu中安装Nginx，而是通过Docker运行的镜像来进行服务器搭建的，是不是感觉玩法挺新奇的。除了Nginx这种简单的应用之外，我们还可以通过Docker来部署复杂应用，之后我们都会一一进行讲解的。</p><h3 id="从虚拟机到容器"><a href="#从虚拟机到容器" class="headerlink" title="从虚拟机到容器"></a>从虚拟机到容器</h3><p>前面我们成功安装了Docker学习环境，以及浅尝了一下Docker为我们带来的应用快速部署。在正式进入学习之前，我们就先从Docker的发展开始说起。</p><p>在Docker出现之前，虚拟化技术可以说是占据了主导地位。首先我们来谈谈为什么会出现虚拟化技术，我们知道在企业中服务器可以说是必不可少的一种硬件设施了，服务器也是电脑，但是不像我们的家用电脑，服务器的配置是非常高的，我们家用电脑的CPU可能最高配也就20核了，内存很少有超过128G的电脑，64G内存的家用电脑可以算奢侈了。而服务器不一样，服务器级别的CPU动辄12核，甚至服务器还能同时安装多块CPU，能直接堆到好几十核：</p><p><img src="https://s2.loli.net/2022/06/30/DPxA9MsZ3WGl62X.png" alt="image-20220630171220207"></p><p>我们家用级CPU一般是AMD的锐龙系列和Intel的酷睿系列（比如i3 i5 i7 i9），而服务器CPU一般是Intel的志强（Xeno）系列，这种CPU的特点就是核心数非常多：</p><p><img src="https://s2.loli.net/2022/06/30/cKlhRZ9Sw1Q4uEX.png" alt="image-20220630172135408"></p><p>并且服务器CPU相比家用CPU的功耗也会更大，因此服务器CPU的发热量非常高，如果你有幸去过机房，你会听见散热风扇猛烈转动的声音（但是服务器CPU的频率没有家用级CPU高，一般大型游戏要求的是高频率而不是核心数，而且功耗也比较大，所以并不适合做家用电脑，所以以后在网上买台式机，看到什么“i9级”CPU千万别买，是这些黑心商家把国外服务器上淘汰下来的服务器CPU（洋垃圾）装成电脑卖给你，所以会很便宜，同时核心数又能媲美i9，所以还是一分钱一分货实在）</p><p>服务器无论是CPU资源还是内存资源都远超家用电脑，而我们编写的Java后端项目，最后都会运行在这些服务器上，不过有一个问题，服务器既然有这么丰富的硬件资源，就跑咱们这一个小Java后端，是不是有点核弹炸蚊子的感觉了？可能顶多就用了服务器5%的硬件资源，服务器这么牛就运行个这也太浪费了吧。</p><p>所以，为了解决这种资源利用率只有5%-15%的情况，咱们能不能想个办法，把这一台服务器分成多个小服务器使用，每个小服务器只分配一部分的资源，比如分一个小服务器出去，只给2个CPU核心和4G内存。但是由于设计上的问题，我们的电脑只能同时运行一个操作系统，那么怎么办呢？此时虚拟化技术就开始兴起了。</p><p>虚拟化使用软件来模拟硬件并创建虚拟计算机系统。这样一来，企业便可以在单台服务器上运行多个虚拟系统，也就是运行多个操作系统和应用，而这可以实现规模经济以及提高效益。比如我们电脑上经常使用的VMware就是一种民用级虚拟化软件：</p><p><img src="https://s2.loli.net/2022/06/30/St3hfELQHNdRZmA.png" alt="image-20220630173915254"></p><p>我们可以使用VMware来创建虚拟机，这些虚拟机实际上都是基于我们当前系统上的VMware软件来运行的，当然VMware也有服务器专用的虚拟化软件，有了虚拟化之后，我们的服务器就像这样：</p><p><img src="https://s2.loli.net/2022/06/30/BmnC1xETQM4uRHO.png" alt="image-20220630174945749"></p><p>相当于通过虚拟机模拟了很多来电脑出来，这样我们就可以在划分出来的多台虚拟机上分别安装系统和部署我们的应用程序了，并且我们可以自由分配硬件资源，合理地使用。一般在企业中，不同的应用序可能会被分别部署到各个服务器上，隔离开来，此时使用虚拟机就非常适合。</p><p>实际上我们在什么腾讯云、阿里云租的云服务器，都是经过虚拟化技术划分出来的虚拟机而已。</p><p>那么，既然虚拟机都这么方便了，容器又是怎么杀出一条血路的呢？我们先来看看什么是容器。</p><p>容器和虚拟机比较类似，都可以为应用提供封装和隔离，都是软件，但是容器中的应用运行是寄托于宿主操作系统的，实际上依然是在直接使用操作系统的资源，当然应用程序之间环境依然是隔离的，而虚拟机则是完全模拟一台真正的电脑出来，直接就是两台不同的电脑。</p><p><img src="https://s2.loli.net/2022/06/30/31GZSh5DE9Vilet.png" alt="image-20220630181037698"></p><p>因此容器相比虚拟机就简单多了，并且启动速度也会快很多，开销小了不少。</p><p>不过容器火的根本原因还是它的集装箱思想，我们知道，如果我们要写一个比如论坛、电商这类的Java项目，那么数据库、消息队列、缓存这类中间件是必不可少的，因此我们如果想要将一个服务部署到服务器，那么实际上还要提前准备好各种各样的环境，先安装好MySQL、Redis、RabbitMQ等应用，配置好了环境，再将我们的Java应用程序启动，整个流程下来，光是配置环境就要浪费大量的时间，如果是大型的分布式项目，可能要部署很多台机器，那岂不是我们得一个一个来？项目上个线就要花几天时间，显然是很荒唐的。</p><p>而容器可以打包整个环境，比较MySQL、Redis等以及我们的Java应用程序，可以被一起打包为一个镜像，当我们需要部署服务时，只需要像我们之前那样，直接下载镜像运行即可，不需要再进行额外的配置了，整个镜像中环境是已经配置好的状态，开箱即用。</p><p><img src="https://s2.loli.net/2022/06/30/NTnU8iSj51CspFw.png" alt="image-20220630182136717"></p><p>而我们要重点介绍的是Docker了，可以看到它的图标就是一只鲸鱼，鲸鱼的上面是很多个集装箱，每个集装箱就是我们的整个环境+应用程序，Docker可以将任何应用及其依赖打包为一个轻量级，可移植，自包含的容器，容器可以运行在几乎所有的操作系统上。</p><h3 id="容器工作机制简述"><a href="#容器工作机制简述" class="headerlink" title="容器工作机制简述"></a>容器工作机制简述</h3><p>我们先来看看Docker的整体架构：</p><p><img src="https://s2.loli.net/2022/06/30/PeaxwNQXkiYSlUv.png" alt="image-20220630184857540"></p><p>实际上分为三个部分：</p><ul><li>Docker 客户端：也就是我们之前使用的docker命令，都是在客户端上执行的，操作会发送到服务端上处理。</li><li>Docker 服务端：服务端就是启动容器的主体了，一般是作为服务在后台运行，支持远程连接。</li><li>Registry：是存放Docker镜像的仓库，跟Maven一样，也可以分公有和私有仓库，镜像可以从仓库下载到本地存放。</li></ul><p>当我们需要在服务器上部署一个已经打包好的应用和环境，我们只需要下载打包好的像就可以了，我们前面执行了：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>实际上这个命令输入之后：</p><ol><li>Docker客户端将操作发送给服务端，告诉服务端我们要运行nginx这个镜像。</li><li>Docker服务端先看看本地有没有这个镜像，发现没有。</li><li>接着只能从公共仓库Docker Hub去查找下载镜像了。</li><li>下载完成，镜像成功保存到本地。</li><li>Docker服务端加载Nginx镜像，启动容器开始正常运行（注意容器和其他容器之间，和外部之间，都是隔离的，互不影响）</li></ol><p>所以，整个流程中，Docker就像是一搜运输船，镜像就像是集装箱，通过运输船将世界各地的货物送往我们的港口，货物到达港口后，Docker并不关心集装箱里面的是什么，只需要创建容器开箱即用就可以了。相比我们传统的手动安装配置环境，不知道方便了几个层次。</p><p>不过容器依然是寄托于宿主主机的运行的，所以一般在生产环境下，是通过虚拟化先创建多台主机，然后再到各个虚拟机中部署Docker，这样的话，运维效率就大大提升了。</p><p>从下一章开始，我们就正式地来学习一下Docker的各种操作。</p><hr><h2 id="容器与镜像"><a href="#容器与镜像" class="headerlink" title="容器与镜像"></a>容器与镜像</h2><p>要启动容器最关键的就是镜像，我们来看看镜像相关的介绍。</p><h3 id="初识容器镜像"><a href="#初识容器镜像" class="headerlink" title="初识容器镜像"></a>初识容器镜像</h3><p>首先我们来了解一下镜像的相关操作，比如现在我们希望把某个镜像从仓库下载到本地，这里使用官方的hello-world镜像：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>只需要输入<code>pull</code>命令，就可以直接下载到指定的镜像了：</p><p><img src="https://s2.loli.net/2022/07/01/tZ4S2HYvNKr7qiD.png" alt="image-20220701111043417"></p><p>可以看到对上面一行有一句Using default tag，实际上一个镜像的名称是由两部分组成的，一个是<code>repository</code>，还有一个是<code>tag</code>，一般情况下约定<code>repository</code>就是镜像名称，<code>tag</code>作为版本，默认为latest，表示最新版本。所以指定版本运行的话：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull 名称:版本<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>之后为了教学方便，我们就直接使用默认的tag，不去指定版本了。</p><p>镜像下载之后会存放在本地，要启动这个镜像的容器，实际上就像我们之前那样，输入<code>run</code>命令就可以了：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>当然如果仅仅是只想创建而不想马上运行的话，可以使用<code>create</code>命令：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> create hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>可以看到成功启动了：</p><p><img src="https://s2.loli.net/2022/07/01/Brl4cnK8WsjP7LV.png" alt="image-20220701111314331"></p><p>启动之后，会使用当前镜像自动创建一个容器，我们可以输入<code>ps</code>命令来查看当前容器的容器列表：</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">docker ps -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>注意后面要加一个<code>-a</code>表示查看所有容器（其他选项可以使用-h查看），如果不加的话，只会显示当前正在运行的容器，而HelloWorld是一次性的不是Nginx那样的常驻程序，所以容器启动打印了上面的内容之后，容器就停止运行了：</p><p><img src="https://s2.loli.net/2022/07/01/zMN3TPR7aHu5YGb.png" alt="image-20220701111840091"></p><p>可以看到容器列表中有我们刚刚创建的hello-world以及我们之前创建的nginx（注意同一个镜像可以创建多个容器），每个容器都有一个随机生成的容器ID写在最前面，后面是容器的创建时间以及当前的运行状态，最后一列是容器的名称，在创建容器时，名称可以由我们指定也可以自动生成，这里就是自动生成的。</p><p>我们可以手动指定名称启动，在使用<code>run</code>命令时，添加<code>--name</code>参数即可：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">--name</span><span class="token operator">=</span>lbwnb hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="https://s2.loli.net/2022/07/01/qOblnhr5CJiIBG6.png" alt="image-20220701125951980"></p><p>我们可以手动开启处于停止状态的容器：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> start <span class="token operator">&lt;</span>容器名称/容器ID<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>注意启动的对象我们要填写容器的ID或是容器的名称才可以，容器ID比较长，可以不写全只写一半，但是你要保证你输入的不完全容器ID是唯一的。</p><p><img src="https://s2.loli.net/2022/07/01/XfFORtqhK9lcBi7.png" alt="image-20220701124845982"></p><p>如果想要停止容器直接输入<code>stop</code>命令就可以了：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> stop <span class="token operator">&lt;</span>容器名称/容器ID<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>或是重启：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> restart <span class="token operator">&lt;</span>容器名称/容器ID<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="https://s2.loli.net/2022/07/01/Q2tor6KRIeUEhO4.png" alt="image-20220701125025173"></p><p>如果我们不需要使用容器了，那么可以将容器删除，但是注意只有容器处于非运行状态时才可以删除：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">rm</span> <span class="token operator">&lt;</span>容器名称/容器ID<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>当然如果我们希望容器在停止后自动删除，我们可以在运行时添加<code>--rm</code>参数：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">--rm</span> 镜像名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="https://s2.loli.net/2022/07/01/3MlPUpjoV1Qg8DX.png" alt="image-20220701125108834"></p><p>删除后，容器将不复存在，当没有任何关于nginx的容器之后，我们可以删除nginx的本地镜像：</p><p><img src="https://s2.loli.net/2022/07/01/bmHqND36yCUBPVj.png" alt="image-20220701125204728"></p><p>我们可以使用<code>images</code>命令来检查一下当前本地有那些镜像：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> images<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="https://s2.loli.net/2022/07/01/fEscbGJXw4e7YFK.png" alt="image-20220701125514145"></p><p>至此，我们已经了解了Docker的简单使用，在后面的学习中，我们还会继续认识更多的玩法。</p><h3 id="镜像结构介绍"><a href="#镜像结构介绍" class="headerlink" title="镜像结构介绍"></a>镜像结构介绍</h3><p>前面我们了解了Docker的相关基本操作，实际上容器的基石就是镜像，有了镜像才能创建对应的容器实例，那么我们就先从镜像的基本结构开始说起，我们来看看镜像到底是个什么样的存在。</p><p>我们在打包项目时，实际上往往需要一个基本的操作系统环境，这样我们才可以在这个操作系统上安装各种依赖软件，比如数据库、缓存等，像这种基本的系统镜像，我们称为base镜像，我们的项目之后都会基于base镜像进行打包，当然也可以不需要base镜像，仅仅是基于当前操作系统去执行简单的命令，比如我们之前使用的hello-world就是。</p><p>一般base镜像就是各个Linux操作系统的发行版，比如我们正在使用的Ubuntu，还有CentOS、Kali等等。这里我们就下载一下CentOS的base镜像：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull centos<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="https://s2.loli.net/2022/07/01/oFKxiMzA3fs2aIl.png" alt="image-20220701132622893"></p><p>可以看到，CentOS的base镜像就已经下载完成，不像我们使用完整系统一样，base镜像的CentOS省去了内核，所以大小只有272M，这里需要解释一下base镜像的机制：</p><p><img src="https://s2.loli.net/2022/07/01/dvmqAjKHkucbLFh.png" alt="image-20220701133111829"></p><p>Linux操作体系由内核空间和用户空间组成，其中内核空间就是整个Linux系统的核心，Linux启动后首先会加<code>bootfs</code>文件系统，加载完成后会自动卸载掉，之后会加载用户空间的文件系统，这一层是我们自己可以进行操作的部分：</p><ul><li>bootfs包含了BootLoader和Linux内核，用户是不能对这层作任何修改的，在内核启动之后，bootfs会自动卸载。</li><li>rootfs则包含了系统上的常见的目录结构，包括<code>/dev</code>、<code> /proc</code>、 <code>/bin</code>等等以及一些基本的文件和命令，也就是我们进入系统之后能够操作的整个文件系统，包括我们在Ubuntu下使用的apt和CentOS下使用的yum，都是用户空间上的。</li></ul><p>base镜像底层会直接使用宿主主机的内核，也就是说你的Ubuntu内核版本是多少，那么base镜像中的CentOS内核版本就是多少，而rootfs则可以在不同的容器中运行多种不同的版本。所以，base镜像实际上只有CentOS的rootfs，因此只有300M大小左右，当然，CentOS里面包含多种基础的软件，还是比较臃肿的，而某些操作系统的base镜像甚至都不到10M。</p><p>使用<code>uname</code>命令可以查看当前内核版本：</p><p><img src="https://s2.loli.net/2022/07/01/mZjupCUktL7Ab2R.png" alt="image-20220701135056123"></p><p>因此，Docker能够同时模拟多种Linux操作系统环境，就不足为奇了，我们可以尝试启动一下刚刚下载的base镜像：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-it</span> centos<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>注意这里需要添加<code>-it</code>参数进行启动，其中<code>-i</code>表示在容器上打开一个标准的入接口，<code>-t</code>表示分配一个伪tty设备，可以支持终端登录，一般这两个是一起使用，否则base容器启动后就自动停止了。</p><p><img src="https://s2.loli.net/2022/07/01/13BYcCWHsDMrwvq.png" alt="image-20220701135834325"></p><p>可以看到使用ls命令能够查看所有根目录下的文件，不过很多命令都没有，连clear都没有，我们来看看内核版本：</p><p><img src="https://s2.loli.net/2022/07/01/PtGwRWfXlTh67qm.png" alt="image-20220701140018095"></p><p>可以看到内核版本是一样的（这也是缺点所在，如果软件对内核版本有要求的话，那么此时使用Docker就直接寄了），我们输入<code>exit</code>就可以退出容器终端了，可以看到退出后容器也停止了：</p><p><img src="https://s2.loli.net/2022/07/01/u5MQnWVihlbkyx1.png" alt="image-20220701140225415"></p><p>当然我们也可以再次启动，注意启动的时候要加上<code>-i</code>才能进入到容器进行交互，否则会在后台运行：</p><p><img src="https://s2.loli.net/2022/07/01/QCsY5EyGSja6Khl.png" alt="image-20220701140706977"></p><p>基于base镜像，我们就可以在这基础上安装各种各样的软件的了，几乎所有的镜像都是通过在base镜像的基础上安装和配置需要的软件构建出来的：</p><p><img src="https://s2.loli.net/2022/07/01/SDwEqz2b7lA9nJa.png" alt="image-20220701143105247"></p><p>每安装一个软件，就在base镜像上一层层叠加上去，采用的是一种分层的结构，这样多个容器都可以将这些不同的层次自由拼装，比如现在好几个容器都需要使用CentOS的base镜像，而上面运行的软件不同，此时分层结构就很爽了，我们只需要在本地保存一份base镜像，就可以给多个不同的容器拼装使用，是不是感觉很灵活？</p><p>我们看到除了这些软件之外，最上层还有一个可写容器层，这个是干嘛的呢，为什么要放在最上面？</p><p>我们知道，所有的镜像会叠起来组成一个统一的文件系统，如果不同层中存在相同位置的文件，那么上层的会覆盖掉下层的文件，最终我们看到的是一叠加之后的文件系统。当我们需要修改容器中的文件时，实际上并不会对镜像进行直接修改，而是在最顶上的容器层（最上面一般称为容器层，下面都是镜像层）进行修改，不会影响到下面的镜像，否则镜像就很难实现多个容器共享了。所以各个操作如下：</p><ul><li>文件读取：要读取一个文件，Docker会最上层往下依次寻找，找到后则打开文件。</li><li>文件创建和修改：创建新文件会直接添加到容器层中，修改文件会从上往下依次寻找各个镜像中的文件，如果找到，则将其复制到容器层，再进行修改。</li><li>删除文件：删除文件也会从上往下依次寻找各个镜像中的文件，一旦找到，并不会直接删除镜像中的文件，而是在容器层标记这个删除操作。</li></ul><p>也就是说，我们对整个容器内的文件进行的操作，几乎都是在最上面的容器层进行的，我们是无法干涉到下面所有的镜像层文件的，这就很好地保护了镜像的完整性，才能实现多个容器共享使用。</p><h3 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h3><p>前面我们已经了解了Docker镜像的结构，实际上所有常用的应用程序都有对应的镜像，我们只需要下载这些镜像然后就可以使用了，而不需要自己去手动安装，顶多需要进行一些特别的配置。当然要是遇到某些冷门的应用，可能没有提供镜像，这时就要我们手动去安装，接着我们就来看看如何构建我们自己的Docker镜像。构建镜像有两种方式，一种是使用<code>commit</code>命令来完成，还有一种是使用Dockerfile来完成，我们先来看第一种。</p><p>这里我们就做一个简单的例子，比如我们现在想要在Ubuntu的base镜像中安装Java环境，并将其打包为新的镜像（这个新的镜像就是一个包含Java环境的Ubuntu系统镜像）</p><p>咱们先启动Ubuntu镜像，然后使用<code>yum</code>命令（跟apt比较类似）来安装Java环境，首先是<code>run</code>命令：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull ubuntu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="https://s2.loli.net/2022/07/01/tP5rhQuqfpxcRHL.png" alt="image-20220701151405640"></p><p>接着启动：</p><p><img src="https://s2.loli.net/2022/07/01/l86G4dK71UwcZPi.png" alt="image-20220701151433520"></p><p>直接使用apt命令来安装Java环境，在这之前先更新一下，因为是最小安装所以本地没有任何软件包：</p><p><img src="https://s2.loli.net/2022/07/01/RAzQr7P8C9aJwxK.png" alt="image-20220701151600847"></p><p>接着输入：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> <span class="token function">install</span> openjdk-8-jdk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>等待安装完成：</p><p><img src="https://s2.loli.net/2022/07/01/Fezitl7PDb19BL4.png" alt="image-20220701152018041"></p><p>这样，我们就完成了对Java环境的安装了，接着我们就可以退出这个镜像然后将其构建为新的镜像：</p><p><img src="https://s2.loli.net/2022/07/01/LAIx5GYCJhsbmSo.png" alt="image-20220701152130041"></p><p>使用<code>commit</code>命令可以将容器保存为新的镜像：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> commit 容器名称/ID 新的镜像名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="https://s2.loli.net/2022/07/01/sbWLlEoMj2ZPcUV.png" alt="image-20220701152302171"></p><p><img src="https://s2.loli.net/2022/07/01/3q4juA8vOJew9W6.png" alt="image-20220701152418060"></p><p>可以看到安装了软件之后的镜像大小比我们原有的大小大得多，这样我们就可以通过这个镜像来直接启动一个带Java环境的Ubuntu操作系统容器了。不过这种方式虽然自定义度很高，但是Docker官方并不推荐，这样的话使用者并不知道镜像是如何构建出来的，是否里面带了后门都不知道，并且这样去构建效率太低了，如果要同时构建多种操作系统的镜像岂不是要一个一个去敲？我们作为普通用户实际上采用Dokcerfile的方式会更好一些。</p><p>我们来看看如何使用Dockerfile的形式创建一个带Java环境的Ubuntu系统镜像。首先直接新建一个名为<code>Dockerfile</code>的文件：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> Dockerfile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>接着我们来进行编辑，<code>Dockerfile</code>内部需要我们编写多种指令来告诉Docker我们的镜像的相关信息：</p><figure><div class="code-wrapper"><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> &lt;基础镜像></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>首先我们需要使用FROM指令来选择当前镜像的基础镜像（须以这个指令开始），这里我们直接使用<code>ubuntu</code>作为基础镜像即可，当然如果不需要任何基础镜像的话，直接使用<code>scratch</code>表示从零开始构建，这里就不演示了。</p><p>基础镜像设定完成之后，我们就需要在容器中运行命令来安装Java环境了，这里需要使用<code>RUN</code>指令：</p><figure><div class="code-wrapper"><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">RUN</span> apt update</span><span class="token instruction"><span class="token keyword">RUN</span> apt install -y openjdk-8-jdk</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>每条指令执行之后，都会生成一个新的镜像层。</p><p>OK，现在我们的Dockerfile就编写完成了，只需要完成一次构建即可：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> build <span class="token parameter variable">-t</span> <span class="token operator">&lt;</span>镜像名称<span class="token operator">></span> <span class="token operator">&lt;</span>构建目录<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>执行后，Docker会在构建目录中寻找Dockerfile文件，然后开始依次执行Dockerfile中的指令：</p><p><img src="https://s2.loli.net/2022/07/01/g6RFwA5t4EsdvnY.png" alt="image-20220701155443170"></p><p>构建过程的每一步都非常清晰地列出来了，一共三条指令对应三步依次进行，我们稍微等待一段时间进行安装，安装过程中所以的日志信息会直接打印到控台（注意Docker镜像构建有缓存机制，就算你现在中途退出了，然后重新进行构建，也会直接将之前已经构建好的每一层镜像，直接拿来用，除非修改了Dockerfile文件重新构建，只要某一层发生变化其上层的构建缓存都会失效，当然包括<code>pull</code>时也会有类似的机制）</p><p><img src="https://s2.loli.net/2022/07/01/foLHIZScQ1KVbvC.png" alt="image-20220701155812315"></p><p>最后成功安装，会出现在本地：</p><p><img src="https://s2.loli.net/2022/07/01/95ueUgyaTcrz6Mi.png" alt="image-20220701155847721"></p><p>可以看到安装出来的大小跟我们之前的是一样的，因为做的事情是一模一样的。我们可以使用<code>history</code>命令来查看构建历史：</p><p><img src="https://s2.loli.net/2022/07/01/GYyHFcjSKJwvWi6.png" alt="image-20220701160128689"></p><p>可以看到最上面两层是我们通过使用apt命令生成的内容，就直接作为当前镜像中的两层镜像，每层镜像都有一个自己的ID，不同的镜像大小也不一样。而我们手动通过<code>commit</code>令来生成的镜像没有这个记录：</p><p><img src="https://s2.loli.net/2022/07/01/qWUeSF3aKrvwJ8p.png" alt="image-20220701160406891"></p><p>如果遇到镜像ID为missing的一般是从Docker Hub中下载的镜像会有这个问题，但是问题不大。用我们自己构建的镜像来创建容器就可以直接体验带Java环境的容器了：</p><p><img src="https://s2.loli.net/2022/07/01/STmdFvBIbN4VAl1.png" alt="image-20220701161546279"></p><p>有关Dockerfile的其他命令，我们还会在后续的学习中逐步认识。</p><h3 id="发布镜像到远程仓库"><a href="#发布镜像到远程仓库" class="headerlink" title="发布镜像到远程仓库"></a>发布镜像到远程仓库</h3><p>前面我们学习了如何构建一个Docker镜像，我们可以将自己的镜像发布到Docker Hub中，就像Git远程仓库一样，我们可以将自己的镜像上传到这里：<a href="https://hub.docker.com/repositories%EF%BC%8C%E6%B2%A1%E6%9C%89%E8%B4%A6%E5%8F%B7%E7%9A%84%E5%85%88%E5%8E%BB%E8%BF%9B%E8%A1%8C%E6%B3%A8%E5%86%8C%E3%80%82">https://hub.docker.com/repositories，没有账号的先去进行注册。</a></p><p><img src="https://s2.loli.net/2022/07/01/3T8xJLgER4cWuQq.png" alt="image-20220701164609666"></p><p>点击右上角的创建仓库，然后填写信息：</p><p><img src="https://s2.loli.net/2022/07/01/SkCKJmU6Rw2lfzP.png" alt="image-20220701164939268"></p><p>创建完后，我们就有了一个公共的镜像仓库，我们可以将本地的镜像上传了，上传之前我们需要将镜像名称修改得规范一点，这里使用<code>tag</code>命令来重新打标签：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> tag ubuntu-java-file:latest 用户名/仓库名称:版本<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>这里我们将版本改成1.0版本吧，不用默认的latest了。</p><p><img src="https://s2.loli.net/2022/07/01/chAPS2DFW5q7GkE.png" alt="image-20220701165231001"></p><p>修改完成后，会创建一个新的本地镜像，名称就是我们自己定义的了。接着我们需在本地登录一下：</p><p><img src="https://s2.loli.net/2022/07/01/T3YC4pfaLEo85Oz.png" alt="image-20220701165446859"></p><p>登录成功后我们就可以上传了：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> push nagocoler/ubuntu-java:1.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="https://s2.loli.net/2022/07/01/CXoBhpZUl79aDRQ.png" alt="image-20220701165744647"></p><p>哈哈，500M的东西传上去，还是有点压力的，如果实在太慢各位可以重新做一个简单点的镜像。上传完成后，打开仓库，可以看到已经有一个1.0版本了：</p><p><img src="https://s2.loli.net/2022/07/01/3UD9y8frEIX1JY6.png" alt="image-20220701165920060"></p><p><img src="https://s2.loli.net/2022/07/01/9sVSjcGCo5mTu61.png" alt="image-20220701170053250"></p><p>注意公共仓库是可以被搜索和下载的，所以我们这里把本地的镜像全部删掉，去下载我们刚刚上传好的镜像。这里我们先搜索一下，搜索使用<code>search</code>命令即可：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> search nagocoler/ubuntu-java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="https://s2.loli.net/2022/07/01/SIUpBOzN5vsiydn.png" alt="image-20220701170253126"></p><p>我们可以使用pull命令将其下载下来：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull nagocoler/ubuntu-java:1.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="https://s2.loli.net/2022/07/01/uXBk3WPsDM4aZKo.png" alt="image-20220701171148334"></p><p>上传之后的镜像是被压缩过的，所以下载的内容就比较少一些。运行试试看：</p><p><img src="https://s2.loli.net/2022/07/01/RJVdstMnxjSYFoW.png" alt="image-20220701171253440"></p><p>当然各位也可以让自己的同学或是在其他机器上尝试下载自己的镜像，看看是不是都可以正常运行。</p><p>Docker Hub也可以自行搭私服，但是这里就不多做介绍了，至此，有关容器和镜像的一些基本操作就讲解得差不多了。</p><h3 id="实战：使用IDEA构建SpringBoot程序镜像"><a href="#实战：使用IDEA构建SpringBoot程序镜像" class="headerlink" title="实战：使用IDEA构建SpringBoot程序镜像"></a>实战：使用IDEA构建SpringBoot程序镜像</h3><p>这里我们创建一个新的SpringBoot项目，现在我们希望能够使用Docker快速地将我们的SpringBoot项目部署到安装了Docker的服务器上，我们就可以将其打包为一个Docker镜像。</p><p><img src="https://s2.loli.net/2022/07/01/QObHMsxAtej6lPq.png" alt="image-20220701173902376"></p><p>先创建好一个项目让它跑起来，可以正常运行就没问题了，接着我们需要将其打包为Docker镜像，这里创建一个新的Dockerfile：</p><figure><div class="code-wrapper"><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> ubuntu</span><span class="token instruction"><span class="token keyword">RUN</span> apt update &amp;&amp; apt install -y openjdk-8-jdk</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>首先还是基于ubuntu构建一个带Java环境的系统镜像，接着我们先将其连接到我们的Docker服务器进行构建，由于IDEA自带了Docker插件，所以我们直接点击左上角的运行按钮，选择第二项 <strong>“为Dockerfile构建镜像”</strong>：</p><p><img src="https://s2.loli.net/2022/07/01/xB5vEw1QHojWZ8p.png" alt="image-20220701203741495"></p><p><img src="https://s2.loli.net/2022/07/01/FAcME5yxZPD1aoz.png" alt="image-20220701202537650"></p><p>这里需要配置Docker的服务器，也就是我们在Ubuntu服务器安装的Docker，这里我们填写服务器相关信息，我们首选需要去修改一下Docker的一些配置，开启远程客户端访问：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/systemd/system/multi-user.target.wants/docker.service <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>打开后，添加高亮部分：</p><p><img src="https://s2.loli.net/2022/07/01/OVMDGqiYWU9E7fA.png" alt="image-20220701202846707"></p><p>修改完成后，重启Docker服务，如果是云服务器，记得开启2375 TCP连接端口：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl daemon-reload<span class="token function">sudo</span> systemctl restart docker.service <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>现在接着在IDEA中进行配置：</p><p><img src="https://s2.loli.net/2022/07/01/bDn3vHFw1XYdusU.png" alt="image-20220701203318098"></p><p>在引擎API URL处填写我们Docker服务器的IP地址：</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">tcp:&#x2F;&#x2F;IP:2375<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>显示连接成功后，表示配置正确，点击保存即可，接着就开始在我的Docker服务器上进行构建了：</p><p><img src="https://s2.loli.net/2022/07/01/nPFSa4Wcep31jXG.png" alt="image-20220701203518930"></p><p>最后成功构建：</p><p><img src="https://s2.loli.net/2022/07/01/1qtCFZKbg6fJsok.png" alt="image-20220701204815069"></p><p>可以看到，Docker服务器上已经有了我们刚刚构建好的镜像：</p><p><img src="https://s2.loli.net/2022/07/01/a6J43UW5biwTyVo.png" alt="image-20220701204900943"></p><p>不过名称没有指定，这里我们重新配置一下：</p><p><img src="https://s2.loli.net/2022/07/01/edPVg4oyrDiqmk6.png" alt="image-20220701204955570"></p><p><img src="https://s2.loli.net/2022/07/01/1QrHVB4zC9iFTG7.png" alt="image-20220701205053642"></p><p>重新进行构建，就是我们自定义的名称了：</p><p><img src="https://s2.loli.net/2022/07/01/qrWDZEKHklSU8OT.png" alt="image-20220701205402607"></p><p><img src="https://s2.loli.net/2022/07/01/6JKXLHEz25QGvMk.png" alt="image-20220701205350004"></p><p>我们来创建一个容器试试看：</p><p><img src="https://s2.loli.net/2022/07/01/8xPUg7qmVzXF9nN.png" alt="image-20220701205500494"></p><p>好了，现在基本环境搭建好了，我们接着就需要将我们SpringBoot项目打包然后再容器启动时运行了，打开Maven执行打包命令：</p><p><img src="https://s2.loli.net/2022/07/01/CRLi2uJcXhzqPHF.png" alt="image-20220701205630885"></p><p>接着我们需要编辑Dockerfile，将我们构建好的jar包放进去：</p><figure><div class="code-wrapper"><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">COPY</span> target/DockerTest-0.0.1-SNAPSHOT.jar app.jar</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>这里需要使用COPY命令来将文件拷贝到镜像中，第一个参数是我们要拷贝的本地文件，第二个参数是存放在Docker镜像中的文件位置，由于还没有学习存储管理，这里我们直接输入<code>app.jar</code>直接保存在默认路径即可。</p><p>接着我们就需要指定在启动时运行我们的Java程序，这里使用CMD命令来完成：</p><figure><div class="code-wrapper"><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> ubuntu</span><span class="token instruction"><span class="token keyword">RUN</span> apt update &amp;&amp; apt install -y openjdk-8-jdk</span><span class="token instruction"><span class="token keyword">COPY</span> target/DockerTest-0.0.1-SNAPSHOT.jar app.jar</span><span class="token instruction"><span class="token keyword">CMD</span> java -jar app.jar</span><span class="token comment"># EXPOSE 8080</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>CMD命令可以设定容器启动后执行的命令，EXPOSE可以指定容器需要暴露的端口，但是现在我们还没有学习网络相关的知识所以暂时不使用，这里指定为我们启动Java项目的命令。配置完成后，重新构建：</p><p><img src="https://s2.loli.net/2022/07/01/NgCLJbRQc1lMqna.png" alt="image-20220701210438145"></p><p>可以看到历史中已经出现新的步骤了：</p><p><img src="https://s2.loli.net/2022/07/01/gpfn4EqjMbZh1Nd.png" alt="image-20220701213513862"></p><p>接着启动我们的镜像，我们可以直接在IDEA中进行操作，不用再去敲命令了，有点累：</p><p><img src="https://s2.loli.net/2022/07/01/t2MV3Tu6IcrK8Dl.png" alt="image-20220701210845768"></p><p><img src="https://s2.loli.net/2022/07/01/JqajY8EdVbGNhiF.png" alt="image-20220701210908997"></p><p>启动后可以在右侧看到容器启动的日志信息：</p><p><img src="https://s2.loli.net/2022/07/01/jreyMHzcX8LTh3k.png" alt="image-20220701210946261"></p><p><img src="https://s2.loli.net/2022/07/01/OGAj3Rr59iVLqfe.png" alt="image-20220701211029119"></p><p>但是我们发现启动之后并不能直接访问，这是为什么呢？这是因为容器内部的网络和外部网络是隔离的，我们如果想要访问容器内的服务器，需要将对应口绑定到宿主机上，让宿主主机也开启这个端口，这样才能连接到容器内：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">8080</span>:8080 <span class="token parameter variable">-d</span> springboot-test:1.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>这里<code>-p</code>表示端口绑定，将Docker容器内的端口绑定到宿主机的端口上，这样就可以通过宿主的8080端口访问到容器的8080端口了（有关容器网络管理我们还会在后面进行详细介绍），<code>-d</code>参数表示后台运行，当然直接在IDEA中配置也是可以的：</p><p><img src="https://s2.loli.net/2022/07/01/dXQlEBIDzU6YTLG.png" alt="image-20220701211536598"></p><p>配置好后，点击重新创建容器：</p><p><img src="https://s2.loli.net/2022/07/01/6G7hbmW81uBsKFc.png" alt="image-20220701211701640"></p><p>重新运行后，我们就可以成功访问到容器中运行的SpringBoot项目了：</p><p><img src="https://s2.loli.net/2022/07/01/7xNrfWcvC58hQ4q.png" alt="image-20220701211753962"></p><p>当然，为了以后方便使用，我们可以直接将其推送到Docker Hub中，这里我们还是创建一个新的公开仓库：</p><p><img src="https://s2.loli.net/2022/07/01/oTXBtlPV7j3C6a9.png" alt="image-20220701212330425"></p><p>这次我们就使用IDEA来演示直接进行镜像的上传，直接点击：</p><p><img src="https://s2.loli.net/2022/07/01/91tKnXDWaeFqcrx.png" alt="image-20220701212458851"></p><p>接着我们需要配置一下我们的Docker Hub相关信息：</p><p><img src="https://s2.loli.net/2022/07/01/tMcD2kzNwW9J7d3.png" alt="image-20220701212637581"></p><p><img src="https://s2.loli.net/2022/07/01/kgTlz3m61ZrHx5s.png" alt="image-20220701212731276"></p><p>OK，远程镜像仓库配置完成，直接推送即可，等待推送完成。</p><p><img src="https://s2.loli.net/2022/07/01/H5UfWXC2nKVeray.png" alt="image-20220701212902977"></p><p>可以看到远程仓库中已经出现了我们的镜像，然后IDEA中也可以同步看到：</p><p><img src="https://s2.loli.net/2022/07/01/mgRKV2SWb9YxBGr.png" alt="image-20220701213026214"></p><p>这样，我们就完成了使用IDEA将SpringBoot项目打包为Docker镜像。</p><hr><h2 id="容器网络管理"><a href="#容器网络管理" class="headerlink" title="容器网络管理"></a>容器网络管理</h2><p><strong>注意：</strong>本小节学习需要掌握部分《计算机网络》课程中的知识。</p><p>前面我们学习了容器和镜像的一些基本操作，了解了如何通过镜像创建容器、然后自己构建容器，以及远程仓库推送等，这一部分我们接着来讨论容器的网络管理。</p><h3 id="容器网络类型"><a href="#容器网络类型" class="headerlink" title="容器网络类型"></a>容器网络类型</h3><p>Docker在安装后，会在我们的主机上创建三个网络，使用<code>network ls</code>命令来查看：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> network <span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="https://s2.loli.net/2022/07/02/7KEumyqriRY2QU5.png" alt="image-20220702161742741"></p><p>可以看到默认情况下有<code>bridge</code>、<code>host</code>、<code>none</code>这三种网络类型（其实有点像虚拟机的网络配置，也是分桥接、共享网络之类的），我们先来依次介绍一下，在开始之前我们先构建一个镜像，默认的ubuntu镜像由于啥软件都没有，所以我们把一会网络要用到的先提前装好：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-it</span> ubuntu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> update<span class="token function">apt</span> <span class="token function">install</span> net-tools iputils-ping <span class="token function">curl</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>这样就安装好了，我们直接退出然后将其构建为新的镜像：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> commit lucid_sammet ubuntu-net<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="https://s2.loli.net/2022/07/02/NIGfx25Un83EV7Q.png" alt="image-20220702170441267"></p><p>OK，一会我们就可以使用了。</p><ul><li><p><strong>none网络：</strong>这个网络除了有一个本地环回网络之外，就没有其他的网络了，我们可以在创建容器时指定这个网络。</p><p>这里使用<code>--network</code>参数来指定网络：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--network</span><span class="token operator">=</span>none ubuntu-net<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>进入之后，我们可以直接查看一下当前的网络：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ifconfig</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>可以看到只有一个本地环回<code>lo</code>网络设备：</p><p><img src="https://s2.loli.net/2022/07/02/qL1oAkOCcIYRwZj.png" alt="image-20220702170000617"></p><p>所以这个容器是无法连接到互联网的：</p><p><img src="https://s2.loli.net/2022/07/02/xzSp4hTBkeFqCd3.png" alt="image-20220702170531312"></p><p>“真”单机运行，可以说是绝对的安全，没人能访问进去，存点密码这些还是不错的。</p></li><li><p><strong>bridge网络：</strong>容器默认使用的网络类型，这是桥接网络，也是应用最广泛的网络类型：</p><p>实际上我们在宿主主机上查看网络信息，会发现有一个名为docker0的网络设备：</p><p><img src="https://s2.loli.net/2022/07/02/jDKSIriXec96uhy.png" alt="image-20220702172102410"></p><p>这个网络设备是Docker安装时自动创建的虚拟设备，它有什么用呢？我们可以来看一下默认创建的容器内部的情况：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-it</span> ubuntu-net<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="https://s2.loli.net/2022/07/02/5JdimQWMaCx7hy2.png" alt="image-20220702172532004"></p><p>可以看到容器的网络接口地址为172.17.0.2，实际上这是Docker创建的虚拟网络，就像容器单独插了一根虚拟的网线，连接到Docker创建的虚拟网络上，而docker0网络实际上作为一个桥接的角色，一头是自己的虚拟子网，另一头是宿主主机的网络。</p><p>网络拓扑类似于下面这样：</p><p><img src="https://s2.loli.net/2022/07/02/xCKMIBwjq7gWOko.png" alt="image-20220702173005750"></p><p>通过添加这样的网桥，我们就可以对容器的网络进行管理和控制，我们可以使用<code>network inspect</code>命令来查看docker0网桥的配置信息：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> network inspect bridge<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="https://s2.loli.net/2022/07/02/86XdZUejEuk1P3i.png" alt="image-20220702173431530"></p><p>这里的配置的子网是172.17.0.0，子网掩码是255.255.0.0，网关是172.17.0.1，也就是docker0这个虚拟网络设备，所以我们上面创建的容器就是这个子网内分配的地址172.17.0.2了。</p><p>之后我们还会讲解如何管理和控制容器网络。</p></li><li><p><strong>host网络：</strong>当容器连接到此网络后，会共享宿主主机的网络，网络配置也是完全一样的：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--network</span><span class="token operator">=</span>host ubuntu-net<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>可以看到网络列表和宿主主机的列表是一样的，不知道各位有没有注意到，连hostname都是和外面一模一样的：</p><p><img src="https://s2.loli.net/2022/07/02/cRAQtIxV4D9byCu.png" alt="image-20220702170754656"></p><p>只要宿主主机能连接到互联网，容器内部也是可以直接使用的：</p><p><img src="https://s2.loli.net/2022/07/02/lVsc1mpihq54Pue.png" alt="image-20220702171041631"></p><p>这样的话，直接使用宿主的络，传输性能基本没有什么折损，而且我们可以直接开放端口等，不需要进行任何的桥接：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> systemctl nginxsystemctl start nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>安装Nginx之后直接就可以访问了，不需要开放什么端口：</p><p><img src="https://s2.loli.net/2022/07/02/1JnY6KyVpXOwbtl.png" alt="image-20220702171550979"></p><p>相比桥接网络就方便得多了。</p></li></ul><p>我们可以根据实际情况，来合理地选择这三种网络使用。</p><h3 id="用户自定义网络"><a href="#用户自定义网络" class="headerlink" title="用户自定义网络"></a>用户自定义网络</h3><p>除了前面我们介绍的三种网络之外，我们也可以自定义自己的网络，让容器连接到这个网络。</p><p>Docker默认提供三种网络驱动：<code>bridge</code>、<code>overlay</code>、<code>macvlan</code>，不同的驱动对应着不同的网络设备驱动，实现的功能也不一样，比如bridge类型的，其实就和我们前面介绍的桥接网络是一样的。</p><p>我们可以使用<code>network create</code>来试试看：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> network create <span class="token parameter variable">--driver</span> bridge <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>这里我们创建了一个桥接网络，称为test：</p><p><img src="https://s2.loli.net/2022/07/02/piCtK8kdRALHSIu.png" alt="image-20220702180837819"></p><p>可以看到新增了一个网络设备，这个就是一会负责我们容器网络的网关了，和之前的docker0是一样的：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> network inspect <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="https://s2.loli.net/2022/07/02/uLwAD4YC3UFXQt7.png" alt="image-20220702181150667"></p><p>这里我们创建一个新的容器，使用此网络：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--network</span><span class="token operator">=</span>test ubuntu-net<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="https://s2.loli.net/2022/07/02/Iy2BwDoZsLMO8gJ.png" alt="image-20220702181252137"></p><p>成功得到分配的IP地址，是在这个网络内的，注意不同的网络之间是隔离的，我们可以再创建一个容器试试看：</p><p><img src="https://s2.loli.net/2022/07/02/b14dflKGMunULQI.png" alt="image-20220702181808792"></p><p>可以看到不同的网络是相互隔离的，无法进行通信，当然我们也为此容器连接到另一个容器所属的网络下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> network connect <span class="token builtin class-name">test</span> 容器ID/名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="https://s2.loli.net/2022/07/02/WzvhI63ydfeJStA.png" alt="image-20220702182050204"></p><p>这样就连接了一个新的网络：</p><p><img src="https://s2.loli.net/2022/07/02/lxqrz36sVUjNdI4.png" alt="image-20220702182146049"></p><p>可以看到容器中新增了一个网络设备连接到我们自己定义的网络中，现在这两个容器在同一个网络下，就可以相互ping了：<br><img src="https://s2.loli.net/2022/07/02/WBlC9PheETO64xq.png" alt="image-20220702182310008"></p><p>这里就不介绍另外两种类型的网络了，他们是用于多主机通信的，目前我们只学习单机使用。</p><h3 id="容器间网络"><a href="#容器间网络" class="headerlink" title="容器间网络"></a>容器间网络</h3><p>我们首先来看看容器和容器之间的网络通信，实际上我们之前已经演示过ping的情况了，现在我们创建两个ubuntu容器：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-it</span> ubuntu-net<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>先获取其中一个容器的网络信息：</p><p><img src="https://s2.loli.net/2022/07/02/yTEcg4l2kASBnQu.png" alt="image-20220702175353454"></p><p>我们可以直接在另一个容器中ping这个容器：</p><p>![image-20220702175444713](&#x2F;Users&#x2F;nagocoler&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20220702175444713.png)</p><p>可以看到能够直接ping通，因为这两个容器都是使用的bridge网络，在同一个子网中，所以可以互相访问。</p><p>我们可以直接通过容器的IP地址在容器间进行通信，只要保证两个容器处于同一个网络下即可，虽然这样比较方便，但是大部分情况下，容器部署之后的IP地址是自动分配的（当然也可以使用<code>--ip</code>来手动指定，但是还是不方便），我们无法提前得知IP地址，那么有没有一直方法能够更灵活一些呢？</p><p>我们可以借助Docker提供的DNS服务器，它就像是一个真的DNS服务器一样，能够对域名进行解析，使用很简单，我们只需要在容器启动时给个名字就行了，我们可以直接访问这个名称，最后会被解析为对应容器的IP地址，但是注意只会在我们用户自定义的网络下生效，默认的网络是不行的：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--name</span><span class="token operator">=</span>test01 <span class="token parameter variable">--network</span><span class="token operator">=</span>test ubuntu-net<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--name</span><span class="token operator">=</span>test02 <span class="token parameter variable">--network</span><span class="token operator">=</span>test ubuntu-net<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>接着直接ping对方的名字就可以了：</p><p><img src="https://s2.loli.net/2022/07/02/lKCFY6ec17N4b5y.png" alt="image-20220702192457354"></p><p>可以看到名称会自动解析为对应的IP地址，这样的话就不用担心IP不确定的问题了。</p><p>当然我们也可以让两个容器同时共享同一个网络，注意这里的共享是直接共享同一个网络设备，两个容器共同使用一个IP地址，只需要在创建时指定：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--name</span><span class="token operator">=</span>test01 <span class="token parameter variable">--network</span><span class="token operator">=</span>container:test02 ubuntu-net<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>这里将网络指定为一个容器的网络，这样两个容器使用的就是同一个网络了：</p><p><img src="https://s2.loli.net/2022/07/02/Wb6jODxFP3r1mE7.png" alt="image-20220702200711351"></p><p>可以看到两个容器的IP地址和网卡的Mac地址是完全一样的，它们的网络现在是共享状态，此时在容器中访问，localhost，既是自己也是别人。</p><p>我们可以在容器1中，安装Nginx，然后再容器2中访问：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> systemctl nginxsystemctl start nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p><img src="https://s2.loli.net/2022/07/02/WTn9OMYmLZJXtBz.png" alt="image-20220702201348722"></p><p>成功访问到另一个容器中的Nginx服务器。</p><h3 id="容器外部网络"><a href="#容器外部网络" class="headerlink" title="容器外部网络"></a>容器外部网络</h3><p>前面我们介绍了容器之间的网络通信，我们接着来看容器与外部网络的通信。</p><p>首先我们来看容器是如何访问到互联网的，在默认的三种的网络下，只有共享模式和桥接模式可以连接到外网，共享模式实际上就是直接使用宿主主机的网络设备连接到互联网，这里我们主要来看一下桥接模式。</p><p>通过前面的学习，我们了解到桥接模式实际上就是创建一个单独的虚拟网络，让容器在这个虚拟网络中，然后通过桥接器来与外界相连，那么数据包是如何从容器内部的网络到达宿主主机再发送到互联网的呢？实际上整个过程中最关键的就是依靠NAT（Network Address Translation）将地址进行转换，再利用宿主主机的IP地址发送数据包出去。</p><p>这里我们来补充一下《计算机网络》课程中学习的NAT：</p><p>实际上NAT在我们生活中也是经常见到的，比如我们要访问互联网上的某个资源，要和服务器进行通信，那么就需要将数据包发送出去，同时服务器也要将数据包发送回来，我们可以知道服务器的IP地址，也可以直接去连接，因为服务器的IP地址是暴露在互联网上的，但是我们的局域网就不一样了，它仅仅局限在我们的家里，比如我们连接了家里的路由器，可以得到一个IP地址，但是你会发现，这个IP公网是无法直接访问到我们的，因为这个IP地址仅仅是一个局域网的IP地址，俗称内网IP，既然公网无法访问到我们，那服务器是如何将数据包发送给我们的呢？</p><p><img src="https://s2.loli.net/2022/07/02/LxtQ68HzEVYKdjW.png" alt="image-20220702230700124"></p><p>实际上这里就借助了NAT在帮助我们与互联网上的服务器进行通信，通过NAT，可以实现将局域网的IP地址，映射为对应的公网IP地址，而NAT设备一端连接外网，另一端连接内网的所有设备，当我们想要与外网进行通信时，就可以将数据包发送给NAT设备，由它来将数据包的源地址映射为它在外网上的地址，这样服务器就能够发现它了，能够直接与它建立通信。当服务器发送数据回来时，也是直接交给NAT设备，然后再根据地址映射，转发给对应的内网设备（当然由于公网IP地址有限，所以一般采用IP+端口结合使用的形式ANPT）</p><p>所以你打开百度直接搜IP，会发现这个IP地址并不是你本地的，而是NAT设备的公网地址：</p><p><img src="https://s2.loli.net/2022/07/02/uAW9GH1b6xkDB3T.png" alt="image-20220702231458928"></p><p>实际上我们家里的路由器一般都带有NAT功能，默认开启NAT模式，包括我们的小区也是有一个NAT设备在进行转换的，这样你的电脑才能在互联网的世界中遨游。当然NAT也可以保护内网的设备不会直接暴露在公网这样也会更加的安全，只有当我们主动发起连接时，别人才能知道我们。</p><p>当然，我们的Docker也是这样的，实际上内网的数据包想要发送到互联网上去，那么就需要经过这样的一套流程：</p><p><img src="https://s2.loli.net/2022/07/02/ktEA5O9BrmxXbPz.png" alt="image-20220702232449520"></p><p>这样，Docker容器使用的内网就可以和外网进行通信了。</p><p>但是这样有一个问题，单纯依靠NAT的话，只有我们主动与外界联系时，外界才能知道我们，但是现在我们的容器中可能会部署一些服务，需要外界来主动连接我们，此时该怎么办呢？</p><p>我们可以直接在容器时配置端口映射，还记得我们在第一节课部署Nginx服务器吗？</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>这里的<code>-p</code>参数实际上是进行端口映射配置，端口映射可以将容器需要对外提供服务的端口映射到宿主主机的端口上，这样，当外部访问到宿主主机的对应端口时，就会直接转发给容器内映射的端口了。规则为<code>宿主端口:容器端口</code>，这里配置的是将容器的80端口映射到宿主主机的80端口上。</p><p><img src="https://s2.loli.net/2022/07/02/WQzEVTwePNaHYgG.png" alt="image-20220702233420287"></p><p>一旦监听到宿主主机的80端口收到了数据包，那么会直接转发给对应的容器。所以配置了端口映射之后，我们才可以从外部正常访问到容器内的服务：</p><p><img src="https://s2.loli.net/2022/07/02/VY5imqeG9jlAz8d.png" alt="image-20220630165440751"></p><p>我们也可以直接输入<code>docker ps</code>查看端口映射情况：</p><p><img src="https://s2.loli.net/2022/07/02/dyDhNRvQ7Bzixka.png" alt="image-20220702233831651"></p><p>至此，有关容器的网络部分，就到此为止，当然这仅仅是单机下的容器网络操作，在以后的课程中，我们还会进一步学习多主机下的网络配置。</p><hr><h2 id="容器存储管理"><a href="#容器存储管理" class="headerlink" title="容器存储管理"></a>容器存储管理</h2><p>前面我们介绍了容器的网络管理，我们现在已经了解了如何配置容器的网络，以及相关的一些原理。还有一个比较重要的部分就是容器的存储，在这一小节我们将深入了解容器的存储管理。</p><h3 id="容器持久化存储"><a href="#容器持久化存储" class="headerlink" title="容器持久化存储"></a>容器持久化存储</h3><p>我们知道，容器在创建之后，实际上我们在容器中创建和修改的文件，实际上是被容器的分层机制保存在最顶层的容器层进行操作的，为了保护下面每一层的镜像不被修改，所以才有了这样的CopyOnWrite特性。但是这样也会导致容器在销毁时数据的丢失，当我们销毁容器重新创建一个新的容器时，所有的数据全部丢失，直接回到梦开始的地方。</p><p>在某些情况下，我们可能希望对容器内的某些文件进行持久化存储，而不是一次性的，这里就要用到数据卷（Data Volume）了。</p><p>在开始之前我们先准备一下实验要用到的镜像：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-it</span> ubuntu<span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">vim</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>然后打包为我们一会要使用的镜像：</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">docker commit <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>我们可以让容器将文件保存到宿主主机上，这样就算容器销毁，文件也会在宿主主机上保留，下次创建容器时，依然可以从宿主主机上读取到对应的文件。如何做到呢？只需要在容器启动时指定即可：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>我们现在用户目录下创建一个新的<code>test</code>目录，然后在里面随便创建一个文件，再写点内容：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> test/hello.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>接着我们就可以将宿主主机上的目录或文件挂载到容器的某个目录上：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">-v</span> ~/test:/root/test ubuntu-volume<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>这里用到了一个新的参数<code>-v</code>，用于指定文件挂载，这里是将我们刚刚创建好的test目录挂在到容器的&#x2F;root&#x2F;test路径上。</p><p><img src="https://s2.loli.net/2022/07/03/ztEJDC4PTVAyZF2.png" alt="image-20220703105256049"></p><p>这样我们就可以直接在容器中访问宿主主机上的文件了，当然如果我们对挂载目录中的文件进行编辑，那么相当于编辑的是宿主主机的数据：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /root/test/test.txt  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="https://s2.loli.net/2022/07/03/YqUHkJiTG3Q9pAM.png" alt="image-20220703105626105"></p><p>在宿主主机的对应目录下，可以直接访问到我们刚刚创建好的文件。</p><p>接着我们来将容器销毁，看看当容器不复存在时，挂载的数据时候还能保留：</p><p><img src="https://s2.loli.net/2022/07/03/B5M6Wy8AxIoqJtC.png" alt="image-20220703105847329"></p><p>可以看到，即使我们销毁了容器，在宿主主机上的文件依然存在，并不会受到影响，这样的话，当我们下次创建新的镜像时，依然可以使用这些保存在外面的文件。</p><p>比如我们现在想要部署一个Nginx服务器来代理我们的前端，就可以直接将前端页面保存到宿主主机上，然后通过挂载的形式让容器中的Nginx访问，这样就算之后Nginx镜像有升级，需要重新创建，也不会影响到我们的前端页面。这里我们来测试一下，我们先将前端模板上传到服务器：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> Downloads/moban5676.zip <span class="token number">192.168</span>.10.10:~/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>然后在服务器上解压一下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> moban5676.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>接着我们就可以启动容器了：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">-v</span> ~/moban5676:/usr/share/nginx/html/ <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 <span class="token parameter variable">-d</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>这里我们将解压出来的目录，挂载到容器中Nginx的默认站点目录<code>/usr/share/nginx/html/</code>（由于挂在后位于顶层，会替代镜像层原有的文件），这样Nginx就直接代理了我们存放在宿主主机上的前端页面，当然别忘了把端口映射到宿主主机上，这里我们使用的镜像是官方的nginx镜像。</p><p>现在我们进入容器将Nginx服务启动：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl start nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>然后通过浏览器访问看看是否代理成功：</p><p><img src="https://s2.loli.net/2022/07/03/YtgXWizh765qFxr.png" alt="image-20220703111937254"></p><p>可以看到我们的前端页面直接被代理了，当然如果我们要编写自定义的配置，也是使用同样的方法操作即可。</p><p>注意如果我们在使用<code>-v</code>参数时不指定宿主主机上的目录进行挂载的话，那么就由Docker来自动创建一个目录，并且会将容器中对应路径下的内容拷贝到这个自动创建的目录中，最后挂在到容器中，这种就是由Docker管理的数据卷了（docker managed volume）我们来试试看：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">-v</span> /root/abc ubuntu-volume<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>注意这里我们仅仅指定了挂载路径，没有指定宿主主机的对应目录，继续创建：</p><p><img src="https://s2.loli.net/2022/07/03/fXCl7IRqKBvYwxj.png" alt="image-20220703112702067"></p><p>创建后可以看到<code>root</code>目录下有一个新的<code>abc</code>目录，那么它具体是在宿主主机的哪个位置呢？这里我们依然可以使用<code>inspect</code>命令：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> inspect bold_banzai <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="https://s2.loli.net/2022/07/03/zFotAfeBpcRjKWN.png" alt="image-20220703113507320"></p><p>可以看到Sorce指向的是<code>/var/lib</code>中的某个目录，我们可以进入这个目录来创建一个新的文件，进入之前记得提升一下权限，权限低了还进不去：</p><p><img src="https://s2.loli.net/2022/07/03/2bfokiMTmdGZcUE.png" alt="image-20220703114333446"></p><p>我们来创一个新的文本档：</p><p><img src="https://s2.loli.net/2022/07/03/yi1hSPC3bAndMXm.png" alt="image-20220703114429831"></p><p>实际上和我们之前是一样的，也是可以在容器中看到的，当然删除容器之后，数据依然是保留的。当我们不需要使用数据卷时，可以进行删除：</p><p><img src="https://s2.loli.net/2022/07/03/f8NPDWmhLtvw3SV.png" alt="image-20220703145011638"></p><p>当然有时候为了方便，可能并不需要直接挂载一个目录上去，仅仅是从宿主主机传递一些文件到容器中，这里我们可以使用<code>cp</code>命令来完成：</p><p><img src="https://s2.loli.net/2022/07/03/uw7S5PobAUWBtCI.png" alt="image-20220703115648195"></p><p>这个命令支持从宿主主机复制文件到容器，或是从容器复制文件到宿主主机，使用方式类似于Linux自带的<code>cp</code>命令。</p><h3 id="容器数据共享"><a href="#容器数据共享" class="headerlink" title="容器数据共享"></a>容器数据共享</h3><p>前面我们通过挂载的形式，将宿主主机上的文件直接挂载到容器中，这样容器就可以直接访问到宿主主机上的文件了，并且在容器删除时也不会清理宿主主机上的文件</p><p>我们接着来看看如何实现容器与容器之间的数据共享，实际上按照我们之前的思路，我们可以在宿主主机创建一个公共的目录，让这些需要实现共享的容器，都挂载这个公共目录：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">-v</span> ~/test:/root/test ubuntu-volume<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="https://s2.loli.net/2022/07/03/soxdKyY4MIXBOin.png" alt="image-20220703141840532"></p><p>由于挂载的是宿主主机上的同一块区域，所以内容可以直接在两个容器中都能访问。当然我们也可以将另一个容器挂载的目录，直接在启动容器时指定使用此容器挂载的目录：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">-v</span> ~/test:/root/test <span class="token parameter variable">--name</span><span class="token operator">=</span>data_test ubuntu-volume<span class="token function">docker</span> run <span class="token parameter variable">-it</span> --volumes-from data_test ubuntu-volume<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>这里使用<code>--volumes-from</code>指定另一个容器（这种用于给其他容器提供数据卷的容器，我们一般称为数据卷容器）</p><p><img src="https://s2.loli.net/2022/07/03/Uu4CjSZifv1Oyr7.png" alt="image-20220703142849845"></p><p>可以看到，数据卷容器中挂载的内容在当前容器中也是存在的，当然就算此时数据卷容器被删除，那么也不会影响到这边，因为这边相当于是继承了数据卷容器提供的数据卷，所以本质上还是让两个容器挂载了同样的目录实现数据共享。</p><p>虽然通过上面的方式，可以在容器之间实现数据传递，但是这样并不方便，可能某些时候我们仅仅是希望容器之间共享，而不希望有宿主主机这个角色直接参与到共享之中，此时我们就需要寻找一种更好的办法了。其实我们可以将数据完全放入到容器中，通过构建一个容器，来直接将容器中打包好的数据分享给其他容器，当然本质上依然是一个Docker管理的数据卷，虽然还是没有完全脱离主机，但是移植性就高得多了。</p><p>我们来编写一个Dockerfile：</p><figure><div class="code-wrapper"><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> ubuntu</span><span class="token instruction"><span class="token keyword">ADD</span> moban5676.tar.gz /usr/share/nginx/html/</span><span class="token instruction"><span class="token keyword">VOLUME</span> /usr/share/nginx/html/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>这里我们使用了一个新的指令ADD，它跟COPY令类似，也可以复制文件到容器中，但是它可以自动对压缩文件进行解压，这里只需要将压缩好的文件填入即可，后面的VOLUME指令就像我们使用<code>-v</code>参数一样，会创建一个挂载点在容器中：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token builtin class-name">test</span><span class="token function">tar</span> <span class="token parameter variable">-zcvf</span> moban5676.tar.gz *<span class="token function">mv</span> moban5676.tar.gz <span class="token punctuation">..</span><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>接着我们直接构建：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> build <span class="token parameter variable">-t</span> data <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="https://s2.loli.net/2022/07/03/M7jxBUsApKtgzku.png" alt="image-20220703153109650"></p><p>现在我们运行一个容器看看：</p><p><img src="https://s2.loli.net/2022/07/03/SUg32jlwMcY7Btp.png" alt="image-20220703153343461"></p><p>可以看到所有的文件都自动解压出来了（除了中文文件名称乱码了之外，不过无关紧要）我们退出容器，可以看到数据卷列表中新增了我们这个容器需要使用的：</p><p><img src="https://s2.loli.net/2022/07/03/m6VCIbXyMxt3ilT.png" alt="image-20220703153514730"></p><p><img src="https://s2.loli.net/2022/07/03/KyLUic5r6oW4HDx.png" alt="image-20220703153542739"></p><p>这个位置实际上就是数据存放在当前主机的位置了，不过是由Docker进行管理而不是我们自定义的。现在我们就可以创建一个新的容器直接继承了：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 --volumes-from<span class="token operator">=</span>data_test <span class="token parameter variable">-d</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>访问一下Nginx服务器，可以看到成功代理：</p><p><img src="https://s2.loli.net/2022/07/03/YtgXWizh765qFxr.png" alt="image-20220703111937254"></p><p>这样我们就实现了将数据放在容器中进行共享，我们不需要刻意去指定宿主主机的挂载点，而是Docker自行管理，这样就算迁移主机依然可以快速部署。</p><hr><h2 id="容器资源管理"><a href="#容器资源管理" class="headerlink" title="容器资源管理"></a>容器资源管理</h2><p>前面我们已经完成Docker的几个主要模块的学习，最后我们来看看如何对容器的资源进行管理。</p><h3 id="容器控制操作"><a href="#容器控制操作" class="headerlink" title="容器控制操作"></a>容器控制操作</h3><p>在开始之前，我们还是要先补充一些我们前面没有提到的其他容器命令。</p><p>首先我们的SpringBoot项目在运行是，怎么查看输出的日志信息呢？</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> logs <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>这里使用<code>log</code>命令来打印容器中的日志信息：</p><p><img src="https://s2.loli.net/2022/07/01/scNgb1uheEpiKL8.png" alt="image-20220701221210083"></p><p>当然也可以添加<code>-f</code>参数来持续打印日志信息。</p><p><img src="https://s2.loli.net/2022/07/01/QTDeKASvHW1rXlw.png" alt="image-20220701215617022"></p><p>现在我们的容器已经启动了，但是我们想要进入到容器监控容器的情况怎么办呢？我们可以是<code>attach</code>命令来附加到容器启动命令的终端上：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> attach 容器ID/名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="https://s2.loli.net/2022/07/01/QjHJsCt3DzqP6kZ.png" alt="image-20220701215829492"></p><p>注意现在就切换为了容器内的终端，如果想要退出的话，需要先按Ctrl+P然后再按Ctrl+Q来退出终端，不能直接使用Ctrl+C来终止，这样会直接终止掉Docker中运行的Java程序的。</p><p><img src="https://s2.loli.net/2022/07/01/XkFKtxq3Epua5ib.png" alt="image-20220701220018207"></p><p> 退出后，容器依然是处于运行状态的。</p><p>我们也可以使用<code>exec</code>命令在容器中启动一个新的终端或是在容器中执行命令：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> <span class="token builtin class-name">test</span> <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><code>-it</code>和<code>run</code>命令操作是一样的，这里执行后，会创建一个新的终端（当然原本的程序还是在正常运行）我们会在一个新的终端中进行交互：</p><p><img src="https://s2.loli.net/2022/07/01/lMc2JueBLIFz9bf.png" alt="image-20220701220601732"></p><p>当然也可以仅仅在容器中执行一条命令：</p><p><img src="https://s2.loli.net/2022/07/01/aVvzjuEM56JmGd7.png" alt="image-20220701220909626"></p><p>执行后会在容器中打开一个新的终端执行命令，并输出结果。</p><p>前面我们还学习了容器的停止操作，通过输入<code>stop</code>命令来停止容器，但是此操作并不会立即停止，而是会等待容器处理善后，那么怎么样才能强制终止容器呢？我们可以直接使用<code>kill</code>命令，相当于给进程发送SIGKILL信号，强制结束。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">kill</span> <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>相比<code>stop</code>命令，<code>kill</code>就没那么温柔了。</p><p>有时候可能只是希望容器暂时停止运行，而不是直接终止运行，我们希望在未来的某个时间点，恢复容器的运行，此时就可以使<code>pause</code>命令来暂停容器：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pause <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>暂停容器后，程序暂时停止运行，无法响应浏览器发送的请求：</p><p><img src="https://s2.loli.net/2022/07/01/1yBYnGmuXVbNFKO.png" alt="image-20220701222537737"></p><p><img src="https://s2.loli.net/2022/07/01/ovbqk7xS3LKhmOH.png" alt="image-20220701222243900"></p><p>此时处于爱的魔力转圈圈状态，我们可以将其恢复运行，使用<code>unpause</code>命令：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> unpause <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>恢复运行后，瞬间就响应成功了。</p><p><img src="https://s2.loli.net/2022/07/01/g2b8mxVz1i7WJop.png" alt="image-20220701222323948"></p><h3 id="物理资源管理"><a href="#物理资源管理" class="headerlink" title="物理资源管理"></a>物理资源管理</h3><p>对于一个容器，在某些情况下我们可能并不希望它占据所有的系统资源来运行，我们只希望分配一部分资源给容器，比如只分配给容器2G内存，最大只允许使用2G，不允许再占用更多的内存，此时我们就需要对容器的资源进行限制。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-m</span> 内存限制 --memory-swap<span class="token operator">=</span>内存和交换分区总共的内存限制 镜像名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>其中<code>-m</code>参数是对容器的物理内存的使用限制，而<code>--memory-swap</code>是对内存和交换分区总和的限制，它们默认都是<code>-1</code>，也就是说没有任何的限制（如果在一开始仅指定<code>-m</code>参数，那么交换内存的限制与其保持一致，内存+交换等于<code>-m</code>的两倍大小）默认情况下跟宿主主机一样，都是2G内存，现在我们可以将容器的内存限制到100M试试看，其中物理内存50M，交换内存50M，尝试启动一下SpringBoot程序：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">-m</span> 50M --memory-swap<span class="token operator">=</span>100M nagocoler/springboot-test:1.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>可以看到，上来就因为内存不足无法启动了：</p><p><img src="https://s2.loli.net/2022/07/02/MrBWZKIzgxE94Ck.png" alt="image-20220702104653971"></p><p>当然除了对内存的限制之外，我们也可以对CPU资源进行限额，默认情况下所有的容器都可以平等地使用CPU资源，我们可以调整不同的容器的CPU权重（默认为1024），来按需分配资源，这里需要使用到<code>-c</code>选项，也可以输入全名<code>--cpu-share</code>：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-c</span> <span class="token number">1024</span> ubuntu<span class="token function">docker</span> run <span class="token parameter variable">-c</span> <span class="token number">512</span> ubuntu<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>这里容器的CPU权重比例为16比8，也就是2比1（注意多个容器时才会生效），那么当CPU资源紧张时，会按照此权重来分配资源，当然如果CPU资源并不紧张的情况下，依然是有机会使用到全部的CPU资源的。</p><p>这里我们使用一个压力测试工具来进行验证：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-c</span> <span class="token number">1024</span> <span class="token parameter variable">--name</span><span class="token operator">=</span>cpu1024 <span class="token parameter variable">-it</span> ubuntu<span class="token function">docker</span> run <span class="token parameter variable">-c</span> <span class="token number">512</span> <span class="token parameter variable">--name</span><span class="token operator">=</span>cpu512 <span class="token parameter variable">-it</span> ubuntu<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>接着我们分别进入容器安装<code>stress</code>压力测试工具：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> stress<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>接着我们分别在两个容器中都启动压力测试工具，产生4个进程不断计算随机数的平方根：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">stress <span class="token parameter variable">-c</span> <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>接着我们进入top来看看CPU状态（看完之后记得赶紧去kill掉容器，不然CPU拉满很卡的）：</p><p><img src="https://s2.loli.net/2022/07/02/3dHkMWnq1ZxCyKm.png" alt="image-20220702114126128"></p><p>可以看到权重高的容器中，分配到了更多的CPU资源，权重低的容器中，只分配到一半的CPU资源。</p><p>当然我们也可以直接限制容器使用的CPU数量：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-it</span> --cpuset-cpus<span class="token operator">=</span><span class="token number">1</span> ubuntu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><code>--cpuset-cpus</code>选项可以直接限制在指定的CPU上运行，比如现在我们的宿主机是2核的CPU，那么就可以分0和1这两个CPU给Docker使用，限制后，只会使用CPU 1的资源了：</p><p><img src="https://s2.loli.net/2022/07/02/erovkRBi7hSOuAt.png" alt="image-20220702115538699"></p><p>可以看到，4个进程只各自使用了25%的CPU，加在一起就是100%，也就是只能占满一个CPU的使用率。如果要分配多个CPU，则使用逗号隔开：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-it</span> --cpuset-cpus<span class="token operator">=</span><span class="token number">0,1</span> ubuntu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>这样就会使用这两个CPU了：</p><p><img src="https://s2.loli.net/2022/07/02/rdAPYlfsgeLOZa9.png" alt="image-20220702115818344"></p><p>当然也可以直接使用<code>--cpus</code>来限制使用的CPU资源数：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--cpus</span><span class="token operator">=</span><span class="token number">1</span> ubuntu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="https://s2.loli.net/2022/07/02/pUGCjlsQbEM2Ika.png" alt="image-20220702120329140"></p><p>限制为1后，只使用一个CPU提供的资源，所以这里加载一起只有一个CPU的资源了。当然还有更精细的<code>--cpu-period </code>和<code>--cpu-quota</code>，这里就不做介绍了。</p><p>最后我们来看一下对磁盘IO读写性能的限制，我们首先使用<code>dd</code>命令来测试磁盘读写速度：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>/dev/zero <span class="token assign-left variable">of</span><span class="token operator">=</span>/tmp/1G <span class="token assign-left variable">bs</span><span class="token operator">=</span>4k <span class="token assign-left variable">count</span><span class="token operator">=</span><span class="token number">256000</span> <span class="token assign-left variable">oflag</span><span class="token operator">=</span>direct<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>可以不用等待跑完，中途Ctrl+C结束就行：</p><p><img src="https://s2.loli.net/2022/07/02/1y3O2qbaMsxDFUJ.png" alt="image-20220702121839871"></p><p>可以看到当前的读写速度为86.4 MB&#x2F;s，我们可以通过<code>--device-read/write-bps</code>和<code>--device-read/write-iops</code>参数对其进行限制。</p><p>这里要先说一下区别：</p><ul><li>bps：每秒读写的数据量。</li><li>iops：每秒IO的次数。</li></ul><p>为了直观，这里我们直接使用BPS作为限制条件：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-it</span> --device-write-bps<span class="token operator">=</span>/dev/sda:10MB ubuntu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>因为容器的文件系统是在<code>/dev/sda</code>上的，所以这我们就<code>/dev/sda:10MB</code>来限制对&#x2F;dev&#x2F;sda的写入速度只有10MB&#x2F;s，我们测试一下看看：</p><p><img src="https://s2.loli.net/2022/07/02/EczxDAmUCvlwT5u.png" alt="image-20220702122557288"></p><p>可以看到现在的速度就只有10MB左右了。</p><h3 id="容器监控"><a href="#容器监控" class="headerlink" title="容器监控"></a>容器监控</h3><p>最后我们来看看如何对容器的运行状态进行实时监控，我们现在希望能够对容器的资源占用情况进行监控，该怎么办呢？</p><p>我们可以使用<code>stats</code>命令来进行监控：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> stats<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="https://s2.loli.net/2022/07/02/hl6qw7sXuavA4pY.png" alt="image-20220702153236692"></p><p>可以实时对容器的各项状态进行监控，包括内存使用、CPU占用、网络I&#x2F;O、磁盘I&#x2F;O等信息，当然如果我们限制内存的使用的话：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-m</span> 200M nagocoler/springboot-test:1.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>可以很清楚地看到限制情况：</p><p><img src="https://s2.loli.net/2022/07/02/CGc6T4iYyN7PD51.png" alt="image-20220702153704729"></p><p>除了使用<code>stats</code>命令来实时监控情况之外，还可以使用<code>top</code>命令来查看容器中的进程：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">top</span> 容器ID/名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="https://s2.loli.net/2022/07/02/ytMjZXK9aivTAWD.png" alt="image-20220702153957780"></p><p>当然也可以携带一些参数，具体的参数与Linux中<code>ps</code>命令参数一致，这里就不多做介绍了。</p><p>但是这样的监控是不是太原始了一点？有没有那种网页面板可以进行实时监控和管理的呢？有的。</p><p>我们需要单独部署一个Docker网页管理面板应用，一般比较常见的有：Portainer，我们这里可以直接通过Docker镜像的方式去部署这个应用程序，搜索一下，发现最新版维护的地址为：<a href="https://hub.docker.com/r/portainer/portainer-ce">https://hub.docker.com/r/portainer/portainer-ce</a></p><p>CE为免费的社区版本，当然也有BE商业版本，这里我们就直接安装社区版就行了，官方Linux安装教程：<a href="https://docs.portainer.io/start/install/server/docker/linux%EF%BC%8C%E5%8C%85%E5%90%AB%E4%B8%80%E4%BA%9B%E5%AE%89%E8%A3%85%E5%89%8D%E9%9C%80%E8%A6%81%E7%9A%84%E5%87%86%E5%A4%87%E3%80%82">https://docs.portainer.io/start/install/server/docker/linux，包含一些安装前需要的准备。</a></p><p>首先我们需要创建一个数据卷供Portainer使用：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> volume create portainer_data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>接着通过官方命令安装启动：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8000</span>:8000 <span class="token parameter variable">-p</span> <span class="token number">9443</span>:9443 <span class="token parameter variable">--name</span> portainer <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token parameter variable">-v</span> /var/run/docker.sock:/var/run/docker.sock <span class="token parameter variable">-v</span> portainer_data:/data portainer/portainer-ce:latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>注意这里需要开放两个端口，一个是8000端口，还有一个是9443端口。</p><p><img src="https://s2.loli.net/2022/07/02/m71ha8YWsUzPFJ4.png" alt="image-20220702155450772"></p><p>OK，开启成功，我们可以直接登录后台面板：<a href="https://ip:9443/%EF%BC%8C%E8%BF%99%E9%87%8C%E9%9C%80%E8%A6%81HTTPS%E8%AE%BF%E9%97%AE%EF%BC%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8F%AF%E8%83%BD%E4%BC%9A%E6%8F%90%E7%A4%BA%E4%B8%8D%E5%AE%89%E5%85%A8%EF%BC%8C%E6%97%A0%E8%A7%86%E5%B0%B1%E8%A1%8C%EF%BC%9A">https://IP:9443/，这里需要HTTPS访问，浏览器可能会提示不安全，无视就行：</a></p><p><img src="https://s2.loli.net/2022/07/02/mukzgvnWZyrxeaM.png" alt="image-20220702155637366"></p><p><img src="https://s2.loli.net/2022/07/02/E3vy1MKPAr5OJtW.png" alt="image-20220702155703962"></p><p>进入后就需要我们进行注册了，这里我们只需输入两次密码即可，默认用户名就是admin，填写完成后，我们就可以开始使用了：</p><p><img src="https://s2.loli.net/2022/07/02/P1JIKaMCl7guYoz.png" alt="image-20220702160124676"></p><p>点击Get Started即可进入到管理页面，我们可以看到目前有一个本地的Docker服务器正在运行：</p><p><img src="https://s2.loli.net/2022/07/02/OUTrAEmwsNoSG8Y.png" alt="image-20220702160328972"></p><p>我们可以点击进入，进行详细地管理，不过唯一缺点就是没中文，挺难受的，也可以使用非官方的汉化版本：<a href="https://hub.docker.com/r/6053537/portainer-ce%E3%80%82">https://hub.docker.com/r/6053537/portainer-ce。</a></p><hr><h2 id="单机容器编排"><a href="#单机容器编排" class="headerlink" title="单机容器编排"></a>单机容器编排</h2><p>最后我们来讲解一下Docker-Compose，它能够对我们的容器进行编排。比如现在我们要在一台主机上部署很多种类型的服务，包括数据库、消息队列、SpringBoot应用程序若干，或是想要搭建一个MySQL集群，这时我们就需要创建多个容器来完成来，但是我们希望能够实现一键部署，这时该怎么办呢？我们就要用到容器编排了，让多个容器按照我们自己的编排进行部署。</p><p><strong>官方文档：</strong><a href="https://docs.docker.com/get-started/08_using_compose/%EF%BC%8C%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%E8%82%AF%E5%AE%9A%E4%B8%8D%E5%8F%AF%E8%83%BD%E6%8A%8A%E6%89%80%E6%9C%89%E7%9A%84%E9%85%8D%E7%BD%AE%E5%85%A8%E9%83%A8%E4%BB%8B%E7%BB%8D%E5%AE%8C%EF%BC%8C%E6%89%80%E4%BB%A5%E5%A6%82%E6%9E%9C%E5%90%84%E4%BD%8D%E5%B0%8F%E4%BC%99%E4%BC%B4%E6%83%B3%E8%A6%81%E4%BA%86%E8%A7%A3%E6%9B%B4%E5%A4%9A%E7%9A%84%E9%85%8D%E7%BD%AE%EF%BC%8C%E6%9C%89%E6%9B%B4%E5%A4%9A%E9%9C%80%E6%B1%82%E7%9A%84%E8%AF%9D%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E6%9F%A5%E9%98%85%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E3%80%82">https://docs.docker.com/get-started/08_using_compose/，视频教程肯定不可能把所有的配置全部介绍完，所以如果各位小伙伴想要了解更多的配置，有更多需求的话，可以直接查阅官方文档。</a></p><h3 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h3><p>Linux环境下我们需要先安装一下插件：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> docker-compose-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>接着输入<code>docker compose version</code>来验证一下是否安装成功。</p><p><img src="https://s2.loli.net/2022/07/03/5XDiAMpgW9aqUGJ.png" alt="image-20220703163126221"></p><p>这里我们就以部署SpringBoot项目为例，我们继续使用之前打包好的SpringBoot项目，现在我们希望部署这个SpringBoot项目的同时，部署一个MySQL服务器，一个Redis服务器，这时我们SpringBoot项目要运行的整个完整环境，先获取到对应的镜像：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull mysql/mysql-server<span class="token function">docker</span> pull redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>接着，我们需要在自己的本地安装一下DockerCompose，下载地址：<a href="https://github.com/docker/compose/releases%EF%BC%8C%E4%B8%8B%E8%BD%BD%E8%87%AA%E5%B7%B1%E7%94%B5%E8%84%91%E5%AF%B9%E5%BA%94%E7%9A%84%E7%89%88%E6%9C%AC%EF%BC%8C%E7%84%B6%E5%90%8E%E5%9C%A8IDEA%E4%B8%AD%E9%85%8D%E7%BD%AE%EF%BC%9A">https://github.com/docker/compose/releases，下载自己电脑对应的版本，然后在IDEA中配置：</a></p><p><img src="https://s2.loli.net/2022/07/03/GmcqXEV3tsPQYd9.png" alt="image-20220703175103531"></p><p>下载完成后，将Docker Compose可执行文件路径修改为你存放刚刚下载的可执行文件的路径，Windows直设置路径就行，MacOS下载之后需要进行下面的操作：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> 下载的文件名称 <span class="token function">docker-compose</span><span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">777</span> <span class="token function">docker-compose</span><span class="token function">sudo</span> <span class="token function">mv</span> <span class="token function">docker-compose</span> /usr/local/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>配置完成后就可以正常使用了，否则会无法运行，接着我们就可以开始在IDEA中编写docker-compose.yml文件了。</p><p><img src="https://s2.loli.net/2022/07/03/M1gcJFUfQtnEpmB.png" alt="image-20220703180206437"></p><p>这里点击右上角的“与服务工具窗口同步”按钮，这样一会就可以在下面查看情况了。</p><p>我们现在就从头开始配置这个文件，现在我们要创建三个服务，一个是MySQL服务器，一个是Redis服务器，还有一个是SpringBoot服务器，需要三个容器来分别运行，首先我们先写上这三个服务：</p><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3.9"</span>  <span class="token comment">#首先是版本号，别乱写，这个是和Docker版本有对应的</span><span class="token key atrule">services</span><span class="token punctuation">:</span>   <span class="token comment">#services里面就是我们所有需要进行编排的服务了</span>  <span class="token key atrule">spring</span><span class="token punctuation">:</span>   <span class="token comment">#服务名称，随便起</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> app_springboot  <span class="token comment">#一会要创建的容器名称</span>  <span class="token key atrule">mysql</span><span class="token punctuation">:</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> app_mysql  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> app_redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这样我们就配置好了一会要创建的三个服务和对应的容器名称，接着我们需要指定一下这些容器对应的镜像了，首先是我们的SpringBoot应用程序，可能我们后续还会对应用程序进行更新和修改，所以这里我们部署需要先由Dockerfile构建出镜像后，再进行部署：</p><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">container_name</span><span class="token punctuation">:</span> app_springboot  <span class="token key atrule">build</span><span class="token punctuation">:</span> .  <span class="token comment">#build表示使用构建的镜像，.表示使用当前目录下的Dockerfile进行构建</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>我们这里修改一下Dockerfile，将基础镜像修改为已经打包好JDK环境的镜像：</p><figure><div class="code-wrapper"><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> adoptopenjdk/openjdk8</span><span class="token instruction"><span class="token keyword">COPY</span> target/DockerTest-0.0.1-SNAPSHOT.jar app.jar</span><span class="token instruction"><span class="token keyword">CMD</span> java -jar app.jar</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>接着是另外两个服务，另外两个服务需要使用对应的镜像来启动容器：</p><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">mysql</span><span class="token punctuation">:</span>  <span class="token key atrule">container_name</span><span class="token punctuation">:</span> app_mysql  <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql/mysql<span class="token punctuation">-</span>server<span class="token punctuation">:</span>latest  <span class="token comment">#image表示使用对应的镜像，这里会自动从仓库下载，然后启动容器</span><span class="token key atrule">redis</span><span class="token punctuation">:</span>  <span class="token key atrule">container_name</span><span class="token punctuation">:</span> app_redis  <span class="token key atrule">image</span><span class="token punctuation">:</span> redis<span class="token punctuation">:</span>latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>还没有结束，我们还需要将SpringBoot项目的端口进行映射，最后一个简单的docker-compose配置文件就编写完成了：</p><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3.9"</span>  <span class="token comment">#首先是版本号，别乱写，这个是和Docker版本有对应的</span><span class="token key atrule">services</span><span class="token punctuation">:</span>   <span class="token comment">#services里面就是我们所有需要进行编排的服务了</span>  <span class="token key atrule">spring</span><span class="token punctuation">:</span>   <span class="token comment">#服务名称，随便起</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> app_springboot  <span class="token comment">#一会要创建的容器名称</span>    <span class="token key atrule">build</span><span class="token punctuation">:</span> .    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token string">"8080:8080"</span>  <span class="token key atrule">mysql</span><span class="token punctuation">:</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> app_mysql    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql/mysql<span class="token punctuation">-</span>server<span class="token punctuation">:</span>latest  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> app_redis    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis<span class="token punctuation">:</span>latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>现在我们就可以直接一键部署了，我们点击下方部署按钮：</p><p><img src="https://s2.loli.net/2022/07/03/bTWZkQidsqfNc9w.png" alt="image-20220703182541976"></p><p><img src="https://s2.loli.net/2022/07/03/YHzOEhS5giBVql2.png" alt="image-20220703182559020"></p><p>看到 Running 4&#x2F;4 就表示已经部署成了，我们现在到服务器这边来看看情况：</p><p><img src="https://s2.loli.net/2022/07/03/ZAsg3KM8r19malT.png" alt="image-20220703182657205"></p><p>可以看到，这里确实是按照我们的配置，创建了3个容器，并且都是处于运行中，可以正常访问：</p><p><img src="https://s2.loli.net/2022/07/03/GqbV1SWMRY8jnEc.png" alt="image-20220703182958392"></p><p>如果想要结束的话，我们只需要点击停止就行了：</p><p><img src="https://s2.loli.net/2022/07/03/ZNRB1XegVFJEaQ7.png" alt="image-20220703183240400"></p><p>当然如果我们不再需要这套环境的话，可以直接点击下方的按钮，将整套编排给down掉，这样的话相对应的容器也会被清理的：</p><p><img src="https://s2.loli.net/2022/07/03/IOVsb3tGpqAnHk9.png" alt="image-20220703183730693"></p><p><img src="https://s2.loli.net/2022/07/03/ZWbxDKTCimdo6Mr.png" alt="image-20220703183807157"></p><p>注意在使用docker-compose部署时，会自动创建一个新的自定义网络，并且所有的容器都是连接到这个自定义的网络里面：</p><p><img src="https://s2.loli.net/2022/07/03/NB2MfgA5GZuCSnd.png" alt="image-20220703210431690"></p><p>这个网络默认也是使用bridge作为驱动：</p><p><img src="https://s2.loli.net/2022/07/03/jEazItdPKxuRcCQ.png" alt="image-20220703210531073"></p><p>这样，我们就完成了一个简单的配置，去部署我们的整套环境。</p><h3 id="部署完整项目"><a href="#部署完整项目" class="headerlink" title="部署完整项目"></a>部署完整项目</h3><p>前面我们学习了使用<code>docker-compose</code>进行简单部署，但是仅仅只是简单启动了服务，我们现在来将这些服务给连起来。首先是SpringBoot项目，我们先引入依赖：</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>接着配置一下数据源，等等，我们怎么知道数据库的默认密码是多少呢？所以我们先配置一下MySQL服务：</p><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">mysql</span><span class="token punctuation">:</span>  <span class="token key atrule">container_name</span><span class="token punctuation">:</span> app_mysql  <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql/mysql<span class="token punctuation">-</span>server<span class="token punctuation">:</span>latest  <span class="token key atrule">environment</span><span class="token punctuation">:</span>   <span class="token comment">#这里我们通过环境变量配置MySQL的root账号和密码</span>    <span class="token key atrule">MYSQL_ROOT_HOST</span><span class="token punctuation">:</span> <span class="token string">'%'</span>   <span class="token comment">#登陆的主机，这里直接配置为'%'</span>    <span class="token key atrule">MYSQL_ROOT_PASSWORD</span><span class="token punctuation">:</span> <span class="token string">'123456.root'</span>    <span class="token comment">#MySQL root账号的密码，别设定得太简单了</span>    <span class="token key atrule">MYSQL_DATABASE</span><span class="token punctuation">:</span> <span class="token string">'study'</span>    <span class="token comment">#在启动时自动创建的数据库</span>    <span class="token key atrule">TZ</span><span class="token punctuation">:</span> <span class="token string">'Asia/Shanghai'</span>    <span class="token comment">#时区</span>  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token string">"3306:3306"</span>    <span class="token comment">#把端口暴露出来，当然也可以不暴露，因为默认所有容器使用的是同一个网络</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>有关MySQL的详细配置请查阅：<a href="https://registry.hub.docker.com/_/mysql">https://registry.hub.docker.com/_/mysql</a></p><p>接着我们将数据源配置完成：</p><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//app_mysql<span class="token punctuation">:</span>3306/study   <span class="token comment">#地址直接输入容器名称，会自动进行解析，前面已经讲过了</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> 123456.root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>然后我们来写点测试的代码吧，这里我们使用JPA进行交互：</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-jpa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@Entity</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"db_account"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Id</span>    <span class="token keyword">long</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">)</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">)</span>    <span class="token class-name">String</span> password<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Account</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token class-name">AccountRepository</span> repository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/get"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Account</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">long</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> repository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/post"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Account</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">long</span> id<span class="token punctuation">,</span>                       <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span>                       <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> repository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>接着我们来修改一下配置文件：</p><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//app_mysql<span class="token punctuation">:</span>3306/study    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> 123456.root  <span class="token key atrule">jpa</span><span class="token punctuation">:</span>    <span class="token key atrule">database</span><span class="token punctuation">:</span> mysql    <span class="token key atrule">show-sql</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">hibernate</span><span class="token punctuation">:</span>      <span class="token key atrule">ddl-auto</span><span class="token punctuation">:</span> update   <span class="token comment">#这里自动执行DDL创建表，全程自动化，尽可能做到开箱即用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>现在代码编写完成后，我们可以将项目打包了，注意执行我们下面的打包命令，不要进行测试，因为连不上数据库：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mvn package <span class="token parameter variable">-DskipTests</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>重新生成jar包后，我们修改一下docker-compose配置，因为MySQL的启动速度比较慢，我们要一点时间等待其启动完成，如果连接不上数据库导致SpringBoot项目启动失败，我们就重启：</p><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>   <span class="token comment">#服务名称，随便起</span>  <span class="token key atrule">container_name</span><span class="token punctuation">:</span> app_springboot  <span class="token comment">#一会要创建的容器名称</span>  <span class="token key atrule">build</span><span class="token punctuation">:</span> .  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token string">"8080:8080"</span>  <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>  <span class="token comment">#这里设置一下依赖，需要等待mysql启动后才运行，但是没啥用，这个并不是等到启动完成后，而是进程建立就停止等待</span>  <span class="token punctuation">-</span> mysql  <span class="token key atrule">restart</span><span class="token punctuation">:</span> always  <span class="token comment">#这里配置容器停止后自动重启</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>然后我们将之前自动构建的镜像删除，等待重新构建：</p><p><img src="https://s2.loli.net/2022/07/03/frdTCPDGIuqwAWH.png" alt="image-20220703215050497"></p><p>现在我们重新部署docker-compos吧：</p><p><img src="https://s2.loli.net/2022/07/03/Tjq8ZYiU4FewKHE.png" alt="image-20220703215133786"></p><p>当三个服务全部为蓝色时，就表示已经正常运行了，现在我们来测试一下吧：</p><p><img src="https://s2.loli.net/2022/07/03/3TYABoDZGpK6Rjb.png" alt="image-20220703215211999"></p><p>接着我们来试试看向数据库传入数据：</p><p><img src="https://s2.loli.net/2022/07/03/nVEURiAe7qjworl.png" alt="image-20220703215236719"></p><p><img src="https://s2.loli.net/2022/07/03/QKFDdriwJCgPbxW.png" alt="image-20220703215245757"></p><p>可以看到响应成功，接着我们来请求一下：</p><p><img src="https://s2.loli.net/2022/07/03/uB6rYDCSbLXmOPE.png" alt="image-20220703215329690"></p><p>这样，我们的项目和MySQL基本就是自动部署了。</p><p>接着我们来配置一下Redis：</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>接着配置连接信息：</p><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//app_mysql<span class="token punctuation">:</span>3306/study    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> 123456.root  <span class="token key atrule">jpa</span><span class="token punctuation">:</span>    <span class="token key atrule">database</span><span class="token punctuation">:</span> mysql    <span class="token key atrule">show-sql</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">hibernate</span><span class="token punctuation">:</span>      <span class="token key atrule">ddl-auto</span><span class="token punctuation">:</span> update  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> app_redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//再加两个Redis操作进来</span><span class="token annotation punctuation">@Resource</span><span class="token class-name">StringRedisTemplate</span> template<span class="token punctuation">;</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/take"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">take</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> template<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/put"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span>  <span class="token function">put</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span>                   <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    template<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"操作成功！"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>最后我们来配置一下docker-compose的配置文件：</p><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">redis</span><span class="token punctuation">:</span>  <span class="token key atrule">container_name</span><span class="token punctuation">:</span> app_redis  <span class="token key atrule">image</span><span class="token punctuation">:</span> redis<span class="token punctuation">:</span>latest  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token string">"6379:6379"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>OK，按照之前的方式，我们重新再部署一下，然后测试：</p><p><img src="https://s2.loli.net/2022/07/03/2O9ExC4YgrJsjfe.png" alt="image-20220703220941562"></p><p><img src="https://s2.loli.net/2022/07/03/1SRG8EDtx5Oqr2M.png" alt="image-20220703221002195"></p>]]></content>
    
    
    
    <tags>
      
      <tag>docker Linux ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring_Data_JPA</title>
    <link href="/2023/06/21/Spring-Data-JPA-reposities/"/>
    <url>/2023/06/21/Spring-Data-JPA-reposities/</url>
    
    <content type="html"><![CDATA[<h3 id="Respository-Bean-是如何创建的"><a href="#Respository-Bean-是如何创建的" class="headerlink" title="Respository Bean 是如何创建的"></a>Respository Bean 是如何创建的</h3><h4 id="JpaRepositoriesRegistrar"><a href="#JpaRepositoriesRegistrar" class="headerlink" title="JpaRepositoriesRegistrar"></a>JpaRepositoriesRegistrar</h4><ul><li>激活了 @EnableJpaRepositories</li><li>返回了 JpaRepositoryConfiguration</li></ul><h4 id="RespositoryBeanDefinitionRegistrarSupport-registerBeanDefinitions"><a href="#RespositoryBeanDefinitionRegistrarSupport-registerBeanDefinitions" class="headerlink" title="RespositoryBeanDefinitionRegistrarSupport.registerBeanDefinitions"></a>RespositoryBeanDefinitionRegistrarSupport.registerBeanDefinitions</h4><ul><li>注册Repository Bean (类型是JpaRepositoryFactoryBean)</li></ul><h4 id="RespositoryConfigurationExtentionSupport-getRepositoryConfiigurations"><a href="#RespositoryConfigurationExtentionSupport-getRepositoryConfiigurations" class="headerlink" title="RespositoryConfigurationExtentionSupport.getRepositoryConfiigurations"></a>RespositoryConfigurationExtentionSupport.getRepositoryConfiigurations</h4><ul><li>取得 Repository 配置</li></ul><h4 id="JpaRepositoryFactory-getTargetRepository"><a href="#JpaRepositoryFactory-getTargetRepository" class="headerlink" title="JpaRepositoryFactory.getTargetRepository"></a>JpaRepositoryFactory.getTargetRepository</h4><ul><li>创建 Repository</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Spring JPA Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>my neovim</title>
    <link href="/2023/06/07/my-neovim/"/>
    <url>/2023/06/07/my-neovim/</url>
    
    <content type="html"><![CDATA[<center><img src="https://raw.githubusercontent.com/theniceboy/nvim/master/demo.png"></center><hr><!-- TOC GFM --><ul><li><a href="#%E5%AE%89%E8%A3%85%E6%AD%A4%E9%85%8D%E7%BD%AE%E5%90%8E%E4%BD%A0%E9%9C%80%E8%A6%81%E5%81%9A%E7%9A%84%E4%BA%8B">安装此配置后你需要做的事</a></li><li><a href="#%E5%AE%89%E8%A3%85%E6%AD%A4%E9%85%8D%E7%BD%AE%E5%90%8E%E4%BD%A0%E5%8F%AF%E8%83%BD%E6%83%B3%E5%81%9A%E7%9A%84%E4%BA%8B">安装此配置后你可能想做的事</a><ul><li><a href="#%E9%A6%96%E5%85%88">首先</a></li><li><a href="#python-%E7%A8%8B%E5%BA%8F%E8%B0%83%E8%AF%95-%E9%80%9A%E8%BF%87-vimspector-%E5%AE%9E%E7%8E%B0">Python 程序调试 (通过 <code>vimspector</code> 实现)</a></li><li><a href="#%E9%85%8D%E7%BD%AE-python-%E8%B7%AF%E5%BE%84">配置 <code>Python</code> 路径</a></li><li><a href="#%E6%A0%87%E7%AD%BE%E8%A1%A8">标签表</a></li><li><a href="#fzf">FZF</a></li><li><a href="#%E5%85%B6%E5%AE%83">其它…</a></li></ul></li><li><a href="#%E5%BF%AB%E6%8D%B7%E9%94%AE">快捷键</a><ul><li><a href="#1-%E5%9F%BA%E7%A1%80%E7%BC%96%E8%BE%91%E5%99%A8%E7%89%B9%E6%80%A7">1 基础编辑器特性</a><ul><li><a href="#11-%E6%9C%80%E5%9F%BA%E6%9C%AC%E7%9A%84%E9%94%AE%E4%BD%8D">1.1 最基本的键位</a></li><li><a href="#12-%E6%94%B9%E5%8F%98%E4%BA%86%E7%9A%84%E5%85%89%E6%A0%87%E7%A7%BB%E5%8A%A8%E6%96%B9%E5%BC%8F">1.2 改变了的光标移动方式</a></li><li><a href="#13-%E6%94%B9%E5%8F%98%E4%BA%86%E6%8F%92%E5%85%A5%E6%A8%A1%E5%BC%8F%E7%9A%84%E9%94%AE%E4%BD%8D">1.3 改变了插入模式的键位</a></li><li><a href="#14-%E6%94%B9%E5%8F%98%E4%BA%86%E5%9C%A8%E6%99%AE%E9%80%9A%E6%A8%A1%E5%BC%8F%E4%B8%8B%E7%9A%84%E6%93%8D%E4%BD%9C%E9%94%AE%E4%BD%8D">1.4 改变了在普通模式下的操作键位</a></li><li><a href="#15-%E5%85%B6%E5%AE%83%E5%9C%A8%E6%99%AE%E9%80%9A%E6%A8%A1%E5%BC%8F%E4%B8%8B%E6%9C%89%E7%9A%84%E9%94%AE%E4%BD%8D">1.5 其它在普通模式下有的键位</a></li><li><a href="#16-%E5%A2%9E%E5%8A%A0%E4%BA%86%E5%9C%A8%E5%8F%AF%E8%A7%86%E6%A8%A1%E5%BC%8F%E4%B8%8B%E7%9A%84%E5%91%BD%E4%BB%A4">1.6 增加了在可视模式下的命令</a></li></ul></li><li><a href="#2-%E7%AA%97%E5%8F%A3%E7%AE%A1%E7%90%86">2 窗口管理</a><ul><li><a href="#21-%E9%80%9A%E8%BF%87%E5%88%86%E8%A3%82%E5%B1%8F%E5%B9%95%E5%88%9B%E9%80%A0%E7%AA%97%E5%8F%A3">2.1 通过分裂屏幕创造窗口</a></li><li><a href="#22-%E5%88%87%E6%8D%A2%E4%B8%8D%E5%90%8C%E7%9A%84%E7%AA%97%E5%8F%A3">2.2 切换不同的窗口</a></li><li><a href="#23-%E4%B8%BA%E4%B8%8D%E5%90%8C%E7%9A%84%E7%AA%97%E5%8F%A3%E8%B0%83%E6%95%B4%E5%A4%A7%E5%B0%8F">2.3 为不同的窗口调整大小</a></li><li><a href="#24-%E5%85%B3%E9%97%AD%E7%AA%97%E5%8F%A3">2.4 关闭窗口</a></li></ul></li><li><a href="#3-%E6%A0%87%E7%AD%BE%E9%A1%B5%E7%AE%A1%E7%90%86">3 标签页管理</a></li><li><a href="#4-%E7%BB%88%E7%AB%AF%E9%94%AE%E7%9B%98%E5%BF%AB%E6%8D%B7%E9%94%AE">4 终端键盘快捷键</a></li></ul></li><li><a href="#%E6%8F%92%E4%BB%B6%E5%BF%AB%E6%8D%B7%E9%94%AE-%E6%88%AA%E5%9B%BE%E5%8A%A8%E5%9B%BE%E5%B7%B2%E7%BB%8F%E5%87%86%E5%A4%87%E5%A5%BD">插件快捷键 (截图&#x2F;动图已经准备好！)</a><ul><li><a href="#%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8">自动补全</a><ul><li><a href="#coc-%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8">COC (自动补全)</a></li><li><a href="#ultisnips">Ultisnips</a></li></ul></li><li><a href="#%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95">代码调试</a><ul><li><a href="#vimspector-%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95%E6%8F%92%E4%BB%B6">vimspector (代码调试插件)</a></li></ul></li><li><a href="#%E6%96%87%E4%BB%B6%E6%B5%8F%E8%A7%88">文件浏览</a><ul><li><a href="#coc-explorer---%E6%96%87%E4%BB%B6%E6%B5%8F%E8%A7%88%E5%99%A8">coc-explorer - 文件浏览器</a></li><li><a href="#rnvimr---%E6%96%87%E4%BB%B6%E6%B5%8F%E8%A7%88%E5%99%A8">rnvimr - 文件浏览器</a></li><li><a href="#fzf---%E6%A8%A1%E7%B3%8A%E6%96%87%E4%BB%B6%E6%9F%A5%E6%89%BE%E5%99%A8">FZF - 模糊文件查找器</a></li><li><a href="#xtabline---%E7%B2%BE%E8%87%B4%E7%9A%84%E9%A1%B6%E6%A0%8F">xtabline - 精致的顶栏</a></li></ul></li><li><a href="#%E6%96%87%E5%AD%97%E7%BC%96%E8%BE%91">文字编辑</a><ul><li><a href="#vim-table-mode">vim-table-mode</a></li><li><a href="#undotree">Undotree</a></li><li><a href="#vim-multiple-cursors">vim-multiple-cursors</a></li><li><a href="#vim-surround">vim-surround</a></li><li><a href="#vim-subversive">vim-subversive</a></li><li><a href="#vim-easy-align">vim-easy-align</a></li><li><a href="#autoformat">AutoFormat</a></li><li><a href="#vim-markdown-toc-%E4%B8%BA-markdown-%E6%96%87%E4%BB%B6%E7%94%9F%E6%88%90%E7%9B%AE%E5%BD%95">vim-markdown-toc (为 Markdown 文件生成目录)</a></li></ul></li><li><a href="#%E7%BC%93%E5%86%B2%E5%8C%BA%E5%86%85%E5%AF%BC%E8%88%AA">缓冲区内导航</a><ul><li><a href="#vim-easy-motion">vim-easy-motion</a></li><li><a href="#vistavim">Vista.vim</a></li><li><a href="#vim-signiture---%E7%AD%BE">vim-signiture - 签</a></li></ul></li><li><a href="#%E6%9F%A5%E6%89%BE%E4%B8%8E%E6%9B%BF%E6%8D%A2">查找与替换</a><ul><li><a href="#farvim---%E6%9F%A5%E6%89%BE%E4%B8%8E%E6%9B%BF%E6%8D%A2">Far.vim - 查找与替换</a></li></ul></li><li><a href="#git-%E7%9B%B8%E5%85%B3">Git 相关</a><ul><li><a href="#vim-gitgutter">vim-gitgutter</a></li><li><a href="#fzf-gitignore">fzf-gitignore</a></li></ul></li><li><a href="#%E5%85%B6%E5%AE%83-1">其它</a><ul><li><a href="#vim-calendar">vim-calendar</a></li><li><a href="#goyo---%E4%B8%8D%E4%BC%9A%E5%88%86%E5%BF%83%E5%9C%B0%E5%B7%A5%E4%BD%9C">Goyo - 不会分心地工作</a></li><li><a href="#sudavim">suda.vim</a></li><li><a href="#coc-translator">coc-translator</a></li></ul></li></ul></li><li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BB%A3%E7%A0%81%E6%AE%B5%E8%A1%A5%E5%85%A8">自定义代码段补全</a><ul><li><a href="#markdown">Markdown</a></li></ul></li><li><a href="#%E4%B8%80%E4%BA%9B%E5%A5%87%E6%80%AA%E7%9A%84%E4%B8%9C%E8%A5%BF">一些奇怪的东西</a><ul><li><a href="#%E6%8C%89-tx-%E7%84%B6%E5%90%8E%E8%BE%93%E5%85%A5%E4%BD%A0%E6%83%B3%E8%A6%81%E7%9A%84%E6%96%87%E5%AD%97">按 <code>tx</code> 然后输入你想要的文字</a></li><li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9E%82%E7%9B%B4%E5%85%89%E6%A0%87%E7%A7%BB%E5%8A%A8">自定义垂直光标移动</a></li></ul></li></ul><!-- /TOC --><h2 id="安装此配置后你需要做的事"><a href="#安装此配置后你需要做的事" class="headerlink" title="安装此配置后你需要做的事"></a>安装此配置后你需要做的事</h2><ul><li><input disabled="" type="checkbox"> 安装 <code>pynvim</code> (使用 <code>pip</code>)</li><li><input disabled="" type="checkbox"> 安装 <code>nodejs</code>, 然后在终端输入 <code>npm install -g neovim</code></li><li><input disabled="" type="checkbox"> 安装 nerd-fonts (尽管它是可选的，但是安装之后看上去十分地酷)</li></ul><h2 id="安装此配置后你可能想做的事"><a href="#安装此配置后你可能想做的事" class="headerlink" title="安装此配置后你可能想做的事"></a>安装此配置后你可能想做的事</h2><h3 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h3><ul><li><input disabled="" type="checkbox"> 执行 <code>:checkhealth</code></li></ul><h3 id="Python-程序调试-通过-vimspector-实现"><a href="#Python-程序调试-通过-vimspector-实现" class="headerlink" title="Python 程序调试 (通过 vimspector 实现)"></a>Python 程序调试 (通过 <code>vimspector</code> 实现)</h3><ul><li><input disabled="" type="checkbox"> 安装 <code>debugpy</code> (使用 <code>pip</code>)</li></ul><h3 id="配置-Python-路径"><a href="#配置-Python-路径" class="headerlink" title="配置 Python 路径"></a>配置 <code>Python</code> 路径</h3><ul><li><input disabled="" type="checkbox"> 确保你安装了 Python</li><li><input disabled="" type="checkbox"> 查看 <code>_machine_specific.vim</code> 文件</li></ul><h3 id="标签表"><a href="#标签表" class="headerlink" title="标签表"></a>标签表</h3><ul><li><input disabled="" type="checkbox"> 安装 <code>ctags</code> 以获得类&#x2F;函数&#x2F;变量的三重支持</li></ul><h3 id="FZF"><a href="#FZF" class="headerlink" title="FZF"></a>FZF</h3><ul><li><input disabled="" type="checkbox"> 安装 <code>fzf</code></li><li><input disabled="" type="checkbox"> 安装 <code>ag</code> (<code>the_silver_searcher</code> 需要)</li></ul><h3 id="其它…"><a href="#其它…" class="headerlink" title="其它…"></a>其它…</h3><ul><li><input disabled="" type="checkbox"> 安装 <code>figlet</code> 以输入 ASCII 艺术字</li><li><input disabled="" type="checkbox"> 安装 <code>xclip</code> 以获得系统剪切板访问支持 (仅 <code>Linux</code> 与 <code>xorg</code> 需要)</li></ul><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><h3 id="1-基础编辑器特性"><a href="#1-基础编辑器特性" class="headerlink" title="1 基础编辑器特性"></a>1 基础编辑器特性</h3><h4 id="1-1-最基本的键位"><a href="#1-1-最基本的键位" class="headerlink" title="1.1 最基本的键位"></a>1.1 最基本的键位</h4><p><strong><code>k</code></strong> : 切换至 <strong><code>插入</code></strong> : 一种模式 (在原版 Vim 中与 <code>i</code> 键相同)</p><p><strong><code>Q</code></strong> : 退出当前 Vim 窗口 (在原版 Vim 中与命令 <code>:q</code> 相同)</p><p><strong><code>S</code></strong> : 保存当前文件 (在原版 Vim 中与命令 <code>:w</code> 相同)</p><p><strong><em>重要</em></strong></p><p>  因为 <code>i</code> 键被改为了 <code>k</code> 键, 所有包含 <code>i</code> 键的命令都必须将 <code>i</code> 改为 <code>k</code> (比如 <code>ciw</code> 应被更正为 <code>ckw</code>)</p><h4 id="1-2-改变了的光标移动方式"><a href="#1-2-改变了的光标移动方式" class="headerlink" title="1.2 改变了的光标移动方式"></a>1.2 改变了的光标移动方式</h4><table><thead><tr><th>快捷键</th><th>行为</th><th>等于 (QWERTY 键盘布局中的些键)</th></tr></thead><tbody><tr><td><code>u</code></td><td>将光标向上移动一行</td><td><code>k</code></td></tr><tr><td><code>e</code></td><td>将光标向下移动一行</td><td><code>j</code></td></tr><tr><td><code>n</code></td><td>将光标向左移动一格</td><td><code>h</code></td></tr><tr><td><code>i</code></td><td>将光标向右移动一格</td><td><code>l</code></td></tr><tr><td><code>U</code></td><td>将光标向上移动五行</td><td><code>5k</code></td></tr><tr><td><code>E</code></td><td>将光标向下移动五行</td><td><code>5j</code></td></tr><tr><td><code>N</code></td><td>将光标移至当前行的第一个字符</td><td><code>0</code></td></tr><tr><td><code>I</code></td><td>将光标移至当前行的最后一个字符</td><td><code>$</code></td></tr><tr><td><code>Ctrl</code> <code>u</code></td><td>将视角向上移动五行而不移动光标</td><td><code>Ctrl</code> <code>y</code></td></tr><tr><td><code>Ctrl</code> <code>e</code></td><td>将视角向下移动五行而不移动光标</td><td><code>Ctrl</code> <code>e</code></td></tr><tr><td><code>h</code></td><td>将光标移至当前单词的末尾</td><td><code>e</code></td></tr><tr><td><code>W</code></td><td>将光标移至五个单词后的末尾</td><td><code>5w</code></td></tr><tr><td><code>B</code></td><td>将光标移至五个单词前的开头</td><td><code>5b</code></td></tr></tbody></table><h4 id="1-3-改变了插入模式的键位"><a href="#1-3-改变了插入模式的键位" class="headerlink" title="1.3 改变了插入模式的键位"></a>1.3 改变了插入模式的键位</h4><table><thead><tr><th>快捷键</th><th>行为</th></tr></thead><tbody><tr><td><code>Ctrl</code> <code>a</code></td><td>将光标移至当前行的末尾</td></tr><tr><td><code>Ctrl</code> <code>u</code></td><td>将光标所在的字母移至当前行的末尾</td></tr></tbody></table><h4 id="1-4-改变了在普通模式下的操作键位"><a href="#1-4-改变了在普通模式下的操作键位" class="headerlink" title="1.4 改变了在普通模式下的操作键位"></a>1.4 改变了在普通模式下的操作键位</h4><table><thead><tr><th>快捷键</th><th>行为</th></tr></thead><tbody><tr><td><code>l</code></td><td><strong>撤销</strong></td></tr><tr><td><code>&lt;</code></td><td>反向缩进</td></tr><tr><td><code>&gt;</code></td><td>缩进</td></tr><tr><td><code>SPACE</code> <code>SPACE</code></td><td>删除下一个 <code>&lt;++&gt;</code> 并进入插入模式</td></tr></tbody></table><h4 id="1-5-其它在普通模式下有的键位"><a href="#1-5-其它在普通模式下有的键位" class="headerlink" title="1.5 其它在普通模式下有的键位"></a>1.5 其它在普通模式下有的键位</h4><table><thead><tr><th>快捷键</th><th>行为</th></tr></thead><tbody><tr><td><code>r</code></td><td><strong>编译&#x2F;运行当前文件</strong></td></tr><tr><td><code>SPACE</code> <code>s</code> <code>c</code></td><td>开关拼写检查</td></tr><tr><td><code>SPACE</code> <code>d</code> <code>w</code></td><td>寻找近处的重复单词</td></tr><tr><td><code>SPACE</code> <code>t</code> <code>t</code></td><td>将四个空格转换为制表符</td></tr><tr><td><code>SPACE</code> <code>o</code></td><td>折叠代码</td></tr><tr><td><code>SPACE</code> <code>-</code></td><td>上一个快速修复位置</td></tr><tr><td><code>SPACE</code> <code>+</code></td><td>下一个快速修复位置</td></tr><tr><td><code>\</code> <code>p</code></td><td>显示当前文件的路径</td></tr><tr><td><code>SPACE</code> <code>/</code></td><td>在当前窗口下方新建一个终端窗口</td></tr></tbody></table><h4 id="1-6-增加了在可视模式下的命令"><a href="#1-6-增加了在可视模式下的命令" class="headerlink" title="1.6 增加了在可视模式下的命令"></a>1.6 增加了在可视模式下的命令</h4><table><thead><tr><th>快捷键</th><th>行为</th></tr></thead><tbody><tr><td><code>Y</code></td><td>复制选中文本至<strong>系统剪切板</strong></td></tr></tbody></table><h3 id="2-窗口管理"><a href="#2-窗口管理" class="headerlink" title="2 窗口管理"></a>2 窗口管理</h3><h4 id="2-1-通过分裂屏幕创造窗口"><a href="#2-1-通过分裂屏幕创造窗口" class="headerlink" title="2.1 通过分裂屏幕创造窗口"></a>2.1 通过分裂屏幕创造窗口</h4><table><thead><tr><th>快捷键</th><th>行为</th></tr></thead><tbody><tr><td><code>s</code> <code>u</code></td><td>新建一个分屏并把它放置在当前窗口的上面</td></tr><tr><td><code>s</code> <code>e</code></td><td>新建一个分屏并把它放置在当前窗口的下面</td></tr><tr><td><code>s</code> <code>n</code></td><td>新建一个分屏并把它放置在当前窗口的左边</td></tr><tr><td><code>s</code> <code>i</code></td><td>新建一个分屏并把它放置在当前窗口的右边</td></tr><tr><td><code>s</code> <code>v</code></td><td>将两个分屏垂直放置</td></tr><tr><td><code>s</code> <code>h</code></td><td>将两个分屏水平放置</td></tr><tr><td><code>s</code> <code>r</code> <code>v</code></td><td>将所有分屏垂直放置</td></tr><tr><td><code>s</code> <code>r</code> <code>h</code></td><td>将所有分屏水平放置</td></tr></tbody></table><h4 id="2-2-切换不同的窗口"><a href="#2-2-切换不同的窗口" class="headerlink" title="2.2 切换不同的窗口"></a>2.2 切换不同的窗口</h4><table><thead><tr><th>快捷键</th><th>行为</th></tr></thead><tbody><tr><td><code>SPACE</code> + <code>w</code></td><td>移至下一个窗口</td></tr><tr><td><code>SPACE</code> + <code>n</code></td><td>移至左边的窗口</td></tr><tr><td><code>SPACE</code> + <code>i</code></td><td>移至右边的窗口</td></tr><tr><td><code>SPACE</code> + <code>u</code></td><td>移至上面的窗口</td></tr><tr><td><code>SPACE</code> + <code>e</code></td><td>移至下面的窗口</td></tr></tbody></table><h4 id="2-3-为不同的窗口调整大小"><a href="#2-3-为不同的窗口调整大小" class="headerlink" title="2.3 为不同的窗口调整大小"></a>2.3 为不同的窗口调整大小</h4><p>用方向键更改当前窗口的大小</p><h4 id="2-4-关闭窗口"><a href="#2-4-关闭窗口" class="headerlink" title="2.4 关闭窗口"></a>2.4 关闭窗口</h4><table><thead><tr><th>快键</th><th>行为</th></tr></thead><tbody><tr><td><code>Q</code></td><td>关闭当前窗口</td></tr><tr><td><code>SPACE</code> <code>q</code></td><td>关闭当前窗口下面的窗口 (如果下面没有窗口，则当前窗口将关闭)</td></tr></tbody></table><h3 id="3-标签页管理"><a href="#3-标签页管理" class="headerlink" title="3 标签页管理"></a>3 标签页管理</h3><table><thead><tr><th>快捷键</th><th>行为</th></tr></thead><tbody><tr><td><code>t</code> <code>u</code></td><td>新建一个标签页</td></tr><tr><td><code>t</code> <code>n</code></td><td>移至左侧标签页</td></tr><tr><td><code>t</code> <code>i</code></td><td>移至右侧标签页</td></tr><tr><td><code>t</code> <code>m</code> <code>n</code></td><td>将当前标签页向左移动一格</td></tr><tr><td><code>t</code> <code>m</code> <code>i</code></td><td>将当前标签页向右移动一格</td></tr></tbody></table><h3 id="4-终端键盘快捷键"><a href="#4-终端键盘快捷键" class="headerlink" title="4 终端键盘快捷键"></a>4 终端键盘快捷键</h3><table><thead><tr><th>快捷键</th><th>行为</th></tr></thead><tbody><tr><td><code>Ctrl</code> <code>n</code></td><td>退出终端输入模式</td></tr></tbody></table><h2 id="插件快捷键-截图-x2F-动图已经准备好！"><a href="#插件快捷键-截图-x2F-动图已经准备好！" class="headerlink" title="插件快捷键 (截图&#x2F;动图已经准备好！)"></a>插件快捷键 (截图&#x2F;动图已经准备好！)</h2><h3 id="自动补全"><a href="#自动补全" class="headerlink" title="自动补全"></a>自动补全</h3><h4 id="COC-自动补全"><a href="#COC-自动补全" class="headerlink" title="COC (自动补全)"></a><a href="https://github.com/neoclide/coc.nvim">COC (自动补全)</a></h4><table><thead><tr><th>快捷键</th><th>为</th></tr></thead><tbody><tr><td><code>Space</code> <code>y</code></td><td><strong>打开剪切板历史</strong></td></tr><tr><td><code>gd</code></td><td>列出定义列表</td></tr><tr><td><code>gr</code></td><td>列出参考列表</td></tr><tr><td><code>gi</code></td><td>待办事项清单</td></tr><tr><td><code>gy</code></td><td>转至类型定义</td></tr><tr><td><code>Space</code> <code>r</code> <code>n</code></td><td>重命名变量</td></tr></tbody></table><img alt="Gif" src="https://user-images.githubusercontent.com/251450/55285193-400a9000-53b9-11e9-8cff-ffe4983c5947.gif" width="60%" /><h4 id="Ultisnips"><a href="#Ultisnips" class="headerlink" title="Ultisnips"></a><a href="https://github.com/SirVer/ultisnips">Ultisnips</a></h4><table><thead><tr><th>快捷键</th><th>行为</th></tr></thead><tbody><tr><td><code>Ctrl</code> <code>e</code></td><td>召唤一个代码片段</td></tr><tr><td><code>Ctrl</code> <code>n</code></td><td>在一个代码片段中前移光标</td></tr><tr><td><code>Ctrl</code> <code>e</code></td><td>在一个代码片段中后移光标</td></tr></tbody></table><p><img src="https://raw.github.com/SirVer/ultisnips/master/doc/demo.gif" alt="GIF Demo"></p><h3 id="代码调试"><a href="#代码调试" class="headerlink" title="代码调试"></a>代码调试</h3><h4 id="vimspector-代码调试插件"><a href="#vimspector-代码调试插件" class="headerlink" title="vimspector (代码调试插件)"></a><a href="https://github.com/puremourning/vimspector">vimspector (代码调试插件)</a></h4><table><thead><tr><th>快捷键</th><th>函数</th></tr></thead><tbody><tr><td><code>F5</code></td><td>继续调试，如果不在一个调试中则开始进行调试</td></tr><tr><td><code>F3</code></td><td>终止调试</td></tr><tr><td><code>F4</code></td><td>用相同的配置重新开始调试</td></tr><tr><td><code>F6</code></td><td>暂停调试</td></tr><tr><td><code>F9</code></td><td>在当前行上切换行的断点</td></tr><tr><td><code>F8</code></td><td>在光标下为表达式添加函数断点</td></tr><tr><td><code>F10</code></td><td>完成步骤</td></tr><tr><td><code>F11</code></td><td>下一步骤</td></tr><tr><td><code>F12</code></td><td>退出当前函数范围</td></tr></tbody></table><img alt="Gif" src="https://puremourning.github.io/vimspector-web/img/vimspector-overview.png" width="60%" /><h3 id="文件浏览"><a href="#文件浏览" class="headerlink" title="文件浏览"></a>文件浏览</h3><h4 id="coc-explorer-文件浏览器"><a href="#coc-explorer-文件浏览器" class="headerlink" title="coc-explorer - 文件浏览器"></a><a href="https://github.com/weirongxu/coc-explorer">coc-explorer - 文件浏览器</a></h4><table><thead><tr><th>快捷键</th><th>行为</th></tr></thead><tbody><tr><td><code>tt</code></td><td><strong>打开文件浏览器</strong></td></tr><tr><td><code>?</code></td><td>查看帮助 (在浏览器中)</td></tr></tbody></table><img alt="Png" src="https://user-images.githubusercontent.com/1709861/64966850-1e9f5100-d8d2-11e9-9490-438c6d1cf378.png" width="60%" /><h4 id="rnvimr-文件浏览器"><a href="#rnvimr-文件浏览器" class="headerlink" title="rnvimr - 文件浏览器"></a><a href="https://github.com/kevinhwang91/rnvimr">rnvimr - 文件浏览器</a></h4><ul><li><input disabled="" type="checkbox"> 确定你已经安装了 ranger</li></ul><p>按 <code>R</code> 键打开 ranger (文件选择器)</p><p>在 rnvimr (ranger) 中, 你可以:</p><table><thead><tr><th>快捷键</th><th>行为</th></tr></thead><tbody><tr><td><code>Ctrl</code> <code>t</code></td><td>在新标签页中打开文件</td></tr><tr><td><code>Ctrl</code> <code>x</code></td><td>上下分裂打开当前文件</td></tr><tr><td><code>Ctrl</code> <code>v</code></td><td>左右分裂打开所选文件</td></tr></tbody></table><img alt="Gif" src="https://user-images.githubusercontent.com/17562139/74416173-b0aa8600-4e7f-11ea-83b5-31c07c384af1.gif" width="60%" /><h4 id="FZF-模糊文件查找器"><a href="#FZF-模糊文件查找器" class="headerlink" title="FZF - 模糊文件查找器"></a><a href="https://github.com/junegunn/fzf.vim">FZF - 模糊文件查找器</a></h4><table><thead><tr><th>快捷键</th><th>行为</th></tr></thead><tbody><tr><td><code>Ctrl</code> <code>p</code></td><td><strong>模糊查找文件</strong></td></tr><tr><td><code>Ctrl</code> <code>u</code></td><td>向上移动一格</td></tr><tr><td><code>Ctrl</code> <code>e</code></td><td>向下移动一格</td></tr><tr><td><code>Ctrl</code> <code>w</code></td><td>模糊查找缓冲区</td></tr><tr><td><code>Ctrl</code> <code>f</code></td><td>模糊查找文件容</td></tr><tr><td><code>Ctrl</code> <code>h</code></td><td>模糊查找历史文件</td></tr><tr><td><code>Ctrl</code> <code>t</code></td><td>模糊查找标签</td></tr></tbody></table><img alt="Gif" src="https://jesseleite.com/uploads/posts/2/tag-finder-opt.gif" width="60%" /><h4 id="xtabline-精致的顶栏"><a href="#xtabline-精致的顶栏" class="headerlink" title="xtabline - 精致的顶栏"></a><a href="https://github.com/mg979/vim-xtabline">xtabline - 精致的顶栏</a></h4><table><thead><tr><th>快捷键</th><th>行为</th></tr></thead><tbody><tr><td><code>to</code></td><td>开关循环标签页模式</td></tr><tr><td><code>\p</code></td><td>显示当前路径</td></tr></tbody></table><img alt="Gif" src="https://i.imgur.com/yU6qbU5.gif" width="60%" /><h3 id="文字编辑"><a href="#文字编辑" class="headerlink" title="文字编辑"></a>文字编辑</h3><h4 id="vim-table-mode"><a href="#vim-table-mode" class="headerlink" title="vim-table-mode"></a><a href="https://github.com/dhruvasagar/vim-table-mode">vim-table-mode</a></h4><table><thead><tr><th>快捷键</th><th>行为</th></tr></thead><tbody><tr><td><code>SPACE</code> <code>t</code> <code>m</code></td><td>开关表格模式</td></tr><tr><td><code>SPACE</code> <code>t</code> <code>r</code></td><td>重组表格</td></tr></tbody></table><p>See <code>:help table-mode.txt</code> for more.</p><h4 id="Undotree"><a href="#Undotree" class="headerlink" title="Undotree"></a><a href="https://github.com/mbbill/undotree">Undotree</a></h4><table><thead><tr><th>快捷键</th><th>行为</th></tr></thead><tbody><tr><td><code>Shift</code> + <code>L</code></td><td>打开撤回历史</td></tr><tr><td><code>u</code></td><td>更新的记录</td></tr><tr><td><code>e</code></td><td>更老的记录</td></tr></tbody></table><img alt="Png" src="https://camo.githubusercontent.com/56430626a5444ea2f0249d71f9288775277c7f5d/68747470733a2f2f73697465732e676f6f676c652e636f6d2f736974652f6d6262696c6c2f756e646f747265655f6e65772e706e67" width="60%" /><h4 id="vim-multiple-cursors"><a href="#vim-multiple-cursors" class="headerlink" title="vim-multiple-cursors"></a><a href="https://github.com/terryma/vim-multiple-cursors">vim-multiple-cursors</a></h4><table><thead><tr><th>快捷键</th><th>行为</th></tr></thead><tbody><tr><td><code>Ctrl</code>+<code>k</code></td><td><strong>选择下一个键 (多重光标)</strong></td></tr><tr><td><code>Alt</code>+<code>k</code></td><td><strong>选择所有键 (多重光标)</strong></td></tr><tr><td><code>Ctrl</code>+<code>p</code></td><td>选择上一个键</td></tr><tr><td><code>Ctrl</code>+<code>s</code></td><td>跳过键</td></tr><tr><td><code>Esc</code></td><td>退出多重光标</td></tr></tbody></table><img alt="Gif" src="https://raw.githubusercontent.com/terryma/vim-multiple-cursors/master/assets/example1.gif" width="60%" /><img alt="Gif" src="https://raw.githubusercontent.com/terryma/vim-multiple-cursors/master/assets/example2.gif" width="60%" /><img alt="Gif" src="https://raw.githubusercontent.com/terryma/vim-multiple-cursors/master/assets/example3.gif" width="60%" /><img alt="Gif" src="https://raw.githubusercontent.com/terryma/vim-multiple-cursors/master/assets/example4.gif" width="60%" /><h4 id="vim-surround"><a href="#vim-surround" class="headerlink" title="vim-surround"></a><a href="https://github.com/tpope/vim-surround">vim-surround</a></h4><p>想要添加包裹符号 (<code>string</code> -&gt; <code>&quot;string&quot;</code>):</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">string<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>按下: <code>yskw&#39;</code>:</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&#39;string&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>想要修改包裹符号</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&#39;string&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>按下: <code>cs&#39;&quot;</code>:</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&quot;string&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><img alt="Gif" src="https://two-wrongs.com/image/surround_vim.gif" width="60%" /><h4 id="vim-subversive"><a href="#vim-subversive" class="headerlink" title="vim-subversive"></a><a href="https://github.com/svermeulen/vim-subversive">vim-subversive</a></h4><p>新的操作员: <code>s</code>:</p><p>您可以执行 <code>s&lt;操作&gt;</code>来使用用默认的寄存器 (或提供的显式寄存器) 的内容替换运动提供的文本对象。例如，您可以执行 <code>skw</code> 将光标下的当前单词替换为当前yank，或执行 <code>skp</code> 替换段落，依此类推</p><h4 id="vim-easy-align"><a href="#vim-easy-align" class="headerlink" title="vim-easy-align"></a><a href="https://github.com/junegunn/vim-easy-align">vim-easy-align</a></h4><p>在普通或可视模式下按 <code>ga</code> + <strong>符号</strong> 可以根据 <strong>符号</strong>对齐文本</p><img alt="Gif" src="https://raw.githubusercontent.com/junegunn/i/master/easy-align/equals.gif" width="60%" /><h4 id="AutoFormat"><a href="#AutoFormat" class="headerlink" title="AutoFormat"></a><a href="https://github.com/Chiel92/vim-autoformat">AutoFormat</a></h4><p>按 <code>\</code> <code>f</code> 开启格式化模式</p><h4 id="vim-markdown-toc-为-Markdown-文件生成目录"><a href="#vim-markdown-toc-为-Markdown-文件生成目录" class="headerlink" title="vim-markdown-toc (为 Markdown 文件生成目录)"></a><a href="https://github.com/mzlogin/vim-markdown-toc">vim-markdown-toc (为 Markdown 文件生成目录)</a></h4><p>在 <code>Markdown</code> 文件中, 按下 <code>:Gen</code> 打开菜单，你将会看到可选选项</p><img alt="Gif" src="https://raw.githubusercontent.com/mzlogin/vim-markdown-toc/master/screenshots/english.gif" width="60%" /><h3 id="缓冲区内导航"><a href="#缓冲区内导航" class="headerlink" title="缓冲区内导航"></a>缓冲区内导航</h3><h4 id="vim-easy-motion"><a href="#vim-easy-motion" class="headerlink" title="vim-easy-motion"></a><a href="https://github.com/easymotion/vim-easymotion">vim-easy-motion</a></h4><p>按 <code>&#39;</code> 键和一个 <code>字母</code> 跳转至 <code>字母</code> (类似 Emacs 的 <a href="https://www.emacswiki.org/emacs/AceJump">AceJump</a>)</p><img alt="Gif" src="https://f.cloud.github.com/assets/3797062/2039359/a8e938d6-899f-11e3-8789-60025ea83656.gif" width="60%" /><h4 id="Vista-vim"><a href="#Vista-vim" class="headerlink" title="Vista.vim"></a><a href="https://github.com/liuchengxu/vista.vim">Vista.vim</a></h4><p>按 <code>T</code> 打开函数与变量列表</p><img alt="Gif" src="https://user-images.githubusercontent.com/8850248/56469894-14d40780-6472-11e9-802f-729ac53bd4d5.gif" width="60%" /><h4 id="vim-signiture-签"><a href="#vim-signiture-签" class="headerlink" title="vim-signiture - 签"></a><a href="https://github.com/kshenoy/vim-signature">vim-signiture - 签</a></h4><table><thead><tr><th>快捷键</th><th>行为</th></tr></thead><tbody><tr><td><code>m&lt;letter&gt;</code></td><td>在当前行添加或删除书签</td></tr><tr><td><code>m/</code></td><td>列出所有书签</td></tr><tr><td><code>mSPACE</code></td><td>在缓冲区中跳转到下一个书签</td></tr><tr><td><code>mt</code></td><td>在当前行添加或删除书签</td></tr><tr><td><code>ma</code></td><td>在当前行添加注释</td></tr><tr><td><code>ml</code></td><td>显示所有的书签</td></tr><tr><td><code>mi</code></td><td>下一个书签</td></tr><tr><td><code>mn</code></td><td>上一个书签</td></tr><tr><td><code>mC</code></td><td>清除一个书签</td></tr><tr><td><code>mX</code></td><td>清除所有书签</td></tr><tr><td><code>mu</code></td><td>将书签往上提一行</td></tr><tr><td><code>me</code></td><td>将书签往下拉一行</td></tr><tr><td><code>SPC</code> <code>g</code></td><td>将书签移至任意行</td></tr></tbody></table><img alt="Gif" src="https://camo.githubusercontent.com/bc2bf1746e30c72d7ff5b79331231e8c388d068a/68747470733a2f2f7261772e6769746875622e636f6d2f4d617474657347726f656765722f76696d2d626f6f6b6d61726b732f6d61737465722f707265766965772e676966" width="60%" /><h3 id="查找与替换"><a href="#查找与替换" class="headerlink" title="查找与替换"></a>查找与替换</h3><h4 id="Far-vim-查找与替换"><a href="#Far-vim-查找与替换" class="headerlink" title="Far.vim - 查找与替换"></a><a href="https://github.com/brooth/far.vim">Far.vim - 查找与替换</a></h4><p>按下 <code>SPACE</code> <code>f</code> <code>r</code> 在工作目录中搜索</p><img alt="Gif" src="https://cloud.githubusercontent.com/assets/9823254/20861878/77dd1882-b9b4-11e6-9b48-8bc60f3d7ec0.gif" width="60%" /><h3 id="Git-相关"><a href="#Git-相关" class="headerlink" title="Git 相关"></a>Git 相关</h3><h4 id="vim-gitgutter"><a href="#vim-gitgutter" class="headerlink" title="vim-gitgutter"></a><a href="https://github.com/airblade/vim-gitgutter">vim-gitgutter</a></h4><table><thead><tr><th>快捷键</th><th>行为</th></tr></thead><tbody><tr><td><code>H</code></td><td><strong>在当前行显示 Git 代码块</strong></td></tr><tr><td><code>SPACE</code> <code>g</code> <code>-</code></td><td>去往上一个 Git 代码块</td></tr><tr><td><code>SPACE</code> <code>g</code> <code>+</code></td><td>去往下一个 Git 代码块</td></tr><tr><td><code>SPACE</code> <code>g</code> <code>f</code></td><td>折叠所有除代码块以外的行</td></tr></tbody></table><h4 id="fzf-gitignore"><a href="#fzf-gitignore" class="headerlink" title="fzf-gitignore"></a><a href="https://github.com/fszymanski/fzf-gitignore">fzf-gitignore</a></h4><p>按 <code>Space</code> <code>g</code> <code>i</code> 来创建一个 <code>.gitignore</code> 文件</p><img alt="Png" src="https://user-images.githubusercontent.com/25827968/42945393-96c662da-8b68-11e8-8279-5bcd2e956ca9.png" width="60%" /><img alt="Png" src="https://raw.githubusercontent.com/airblade/vim-gitgutter/master/screenshot.png" width="60%" /><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><h4 id="vim-calendar"><a href="#vim-calendar" class="headerlink" title="vim-calendar"></a><a href="https://github.com/itchyny/calendar.vim">vim-calendar</a></h4><table><thead><tr><th>快捷键</th><th>行为</th></tr></thead><tbody><tr><td><code>\</code> <code>\</code></td><td>显示时钟</td></tr><tr><td><code>\</code> <code>c</code></td><td>显示日历</td></tr></tbody></table><img alt="Png" src="https://raw.githubusercontent.com/wiki/itchyny/calendar.vim/image/image.png" width="60%" /><h4 id="Goyo-不会分心地工作"><a href="#Goyo-不会分心地工作" class="headerlink" title="Goyo - 不会分心地工作"></a><a href="https://github.com/junegunn/goyo.vim">Goyo - 不会分心地工作</a></h4><p>按下 <code>g</code> <code>y</code> 开关 Goyo</p><img alt="Png" src="https://raw.github.com/junegunn/i/master/goyo.png" width="60%" /><h4 id="suda-vim"><a href="#suda-vim" class="headerlink" title="suda.vim"></a><a href="https://github.com/lambdalisue/suda.vim">suda.vim</a></h4><p>想要忘记以前痛苦的 <code>sudo vim ...</code>? 只需要在 Vim 中执行 <code>:sudowrite</code> 或者 <code>:sw</code></p><h4 id="coc-translator"><a href="#coc-translator" class="headerlink" title="coc-translator"></a><a href="https://github.com/voldikss/coc-translator">coc-translator</a></h4><p>按下 <code>ts</code> 来 <strong>翻译光标所在的单词</strong>.</p><img alt="Png" src="https://user-images.githubusercontent.com/20282795/72232547-b56be800-35fc-11ea-980a-3402fea13ec1.png" width="60%" /><h2 id="自定义代码段补全"><a href="#自定义代码段补全" class="headerlink" title="自定义代码段补全"></a>自定义代码段补全</h2><h3 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h3><table><thead><tr><th>快捷键</th><th>创建的文字</th></tr></thead><tbody><tr><td><code>,n</code></td><td>—</td></tr><tr><td><code>,b</code></td><td><strong>粗体</strong>文字</td></tr><tr><td><code>,s</code></td><td><del>被划去</del>的文字</td></tr><tr><td><code>,i</code></td><td><em>斜体</em>文字</td></tr><tr><td><code>,d</code></td><td><code>代码块</code></td></tr><tr><td><code>,c</code></td><td>大的 <code>代码块</code></td></tr><tr><td><code>,m</code></td><td>- [ ] 清单</td></tr><tr><td><code>,p</code></td><td>图片</td></tr><tr><td><code>,a</code></td><td><a href="">链接</a></td></tr><tr><td><code>,1</code></td><td># H1</td></tr><tr><td><code>,2</code></td><td>## H2</td></tr><tr><td><code>,3</code></td><td>### H3</td></tr><tr><td><code>,4</code></td><td>#### H4</td></tr><tr><td><code>,l</code></td><td>——–</td></tr></tbody></table><p><code>,f</code> 去往下一个 <code>&lt;++&gt;</code> (占位符)</p><p><code>,w</code> 去往下一个 <code>&lt;++&gt;</code> (占位符) 并帮你按下 <code>Enter</code></p><h2 id="一些奇怪的东西"><a href="#一些奇怪的东西" class="headerlink" title="一些奇怪的东西"></a>一些奇怪的东西</h2><h3 id="按-tx-然后输入你想要的文字"><a href="#按-tx-然后输入你想要的文字" class="headerlink" title="按 tx 然后输入你想要的文字"></a>按 <code>tx</code> 然后输入你想要的文字</h3><p><code>tx Hello&lt;Enter&gt;</code></p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none"> _   _      _ _| | | | ___| | | ___| |_| |&#x2F; _ \ | |&#x2F; _ \|  _  |  __&#x2F; | | (_) ||_| |_|\___|_|_|\___&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="自定义垂直光标移动"><a href="#自定义垂直光标移动" class="headerlink" title="自定义垂直光标移动"></a>自定义垂直光标移动</h3><p>此 NeoVim 配置包含了一套对 Colemak 用户量身定制的垂直光标移动, 它位于 <code>cursor.vim</code> 中, 并且可以替代 “数字 + 上 &#x2F; 下” 的案件组合</p><p>为了将光标向上移至 <code>x</code> 行, 可以按下 <code>[</code> 键, 并将 Colemak 键盘布局的中间行 (“arstdhneio”) 视为从 1 到 0 的数字, 按所需的数字, 再按下空格键以跳转至 <code>x</code> 行之上</p><p>要向下移动光标, 按 <code>&#39;</code> 键而不是 <code>[</code> 键, 其余部分相同</p><p>例:</p><table><thead><tr><th>快捷键</th><th>行为</th></tr></thead><tbody><tr><td><code>[</code> <code>a</code> <code>o</code> <code>o</code> <code>SPACE</code></td><td>将光标向上移动 100 行</td></tr><tr><td><code>&#39;</code> <code>a</code> <code>r</code> <code>s</code> <code>SPACE</code></td><td>将光标向下移动123行</td></tr><tr><td><code>[</code> <code>d</code> <code>o</code> <code>SPACE</code></td><td>将光标向上移动50行</td></tr></tbody></table><p><strong>注意: 目前, 使用此移动方式, 你最多只能垂直移动 199 行!</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>neovim nvim vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>my tmux</title>
    <link href="/2023/05/28/my-tmux/"/>
    <url>/2023/05/28/my-tmux/</url>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://cloud.githubusercontent.com/assets/553208/19740585/85596a5a-9bbf-11e6-8aa1-7c8d9829c008.gif" alt="Screenshot"></h2><h2 id="my-github"><a href="#my-github" class="headerlink" title="my github"></a><a href="https://peiong.github.io/">my github</a></h2><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Requirements:</p><ul><li>tmux <strong><code>&gt;= 2.1</code></strong> (soon <code>&gt;= 2.4</code>) running inside Linux, Mac, OpenBSD, Cygwin<br>or WSL</li><li>awk, perl and sed</li><li>outside of tmux, <code>$TERM</code> must be set to <code>xterm-256color</code></li></ul><p>To install, run the following from your terminal: (you may want to backup your<br>existing <code>~/.tmux.conf</code> first)</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span>$ <span class="token function">git</span> clone https://github.com/gpakosz/.tmux.git$ <span class="token function">ln</span> <span class="token parameter variable">-s</span> <span class="token parameter variable">-f</span> .tmux/.tmux.conf$ <span class="token function">cp</span> .tmux/.tmux.conf.local <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>Then proceed to [customize] your <code>~/.tmux.conf.local</code> copy.<br>[customize]: #enabling-the-powerline-look</p><p>If you’re a Vim user, setting the <code>$EDITOR</code> environment variable to <code>vim</code> will<br>enable and further customize the vi-style key bindings (see tmux manual).</p><p>If you’re new to tmux, I recommend you read <a href="https://pragprog.com/book/bhtmux2/tmux-2">tmux 2: Productive Mouse-Free<br>Development</a> by <a href="https://twitter.com/bphogan">@bphogan</a>.</p><h2 id="Troubleshooting"><a href="#Troubleshooting" class="headerlink" title="Troubleshooting"></a>Troubleshooting</h2><ul><li><p><strong>I’m running tmux <code>HEAD</code> and things don’t work properly. What should I do?</strong></p><p>Please open an issue describing what doesn’t work with upcoming tmux. I’ll do<br>my best to address it.</p></li><li><p><strong>Status line is broken and&#x2F;or gets duplicated at the bottom of the screen.<br>What gives?</strong></p><p>This particularly happens on Linux when the distribution provides a version<br>of glib that received Unicode 9.0 upgrades (glib <code>&gt;= 2.50.1</code>) while providing<br>a version of glibc that didn’t (glibc <code>&lt; 2.26</code>). You may also configure<br><code>LC_CTYPE</code> to use an <code>UTF-8</code> locale. Typically VTE based terminal emulators<br>rely on glib’s <code>g_unichar_iswide()</code> function while tmux relies on glibc’s<br><code>wcwidth()</code> function. When these two functions disagree, display gets messed<br>up.</p><p>This can also happen on macOS when using iTerm2 and “Use Unicode version 9<br>character widths” is enabled in <code>Preferences... &gt; Profiles &gt; Text</code></p><p>For that reason, the default <code>~/.tmux.conf.local</code> file stopped using Unicode<br>characters for which width changed in between Unicode 8.0 and 9.0 standards,<br>as well as Emojis.</p></li><li><p><strong>I installed Powerline and&#x2F;or (patched) fonts but can’t see Powerline<br>symbols.</strong></p><p>First, you don’t need to install Powerline. You only need fonts patched with<br>Powerline symbols or the standalone <code>PowerlineSymbols.otf</code> font. Then make<br>sure your <code>~/.tmux.conf.local</code> copy uses the right code points for<br><code>tmux_conf_theme_left_separator_XXX</code> values.</p></li><li><p><strong>I’m using Bash On Windows (WSL), colors and Powerline look are broken.</strong></p><p>There is currently a <a href="https://github.com/Microsoft/BashOnWindows/issues/1681">bug</a> in the new console powering Bash On Windows<br>preventing text attributes (bold, underscore, …) to combine properly with<br>colors. The workaround is to search your <code>~/.tmux.conf.local</code> copy and<br>replace attributes with <code>&#39;none&#39;</code>.</p><p>Also, until Window’s console replaces its GDI based render with a DirectWrite<br>one, Powerline symbols will be broken.</p><p>The alternative is to use the <a href="https://github.com/mintty/wsltty">Mintty terminal for WSL</a>.</p></li></ul><h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><ul><li><code>C-a</code> acts as secondary prefix, while keeping default <code>C-b</code> prefix</li><li>visual theme inspired by <a href="https://github.com/Lokaltog/powerline">Powerline</a></li><li><a href="http://pempek.net/articles/2013/04/14/maximizing-tmux-pane-new-window/">maximize any pane to a new window with <code>&lt;prefix&gt; +</code></a></li><li>SSH&#x2F;Mosh aware username and hostname status line information</li><li>mouse mode toggle with <code>&lt;prefix&gt; m</code></li><li>automatic usage of <a href="https://github.com/ChrisJohnsen/tmux-MacOSX-pasteboard"><code>reattach-to-user-namespace</code></a><br>if available</li><li>laptop battery status line information</li><li>uptime status line information</li><li>optional highlight of focused pane (tmux <code>&gt;= 2.1</code>)</li><li>configurable new windows and panes behavior (optionally retain current path)</li><li>SSH&#x2F;Mosh aware split pane (reconnects to remote server)</li><li>copy to OS clipboard (needs <a href="https://github.com/ChrisJohnsen/tmux-MacOSX-pasteboard"><code>reattach-to-user-namespace</code></a><br>on macOS, <code>xsel</code> or <code>xclip</code> on Linux)</li><li>support for 4-digit hexadecimal Unicode characters (requires <code>perl</code> or Bash &gt;&#x3D; 4.1.2)</li><li><a href="https://facebook.github.io/PathPicker/">Facebook PathPicker</a> integration if available</li><li><a href="https://packages.debian.org/stable/misc/urlview">Urlview</a> integration if available</li></ul><p>The “maximize any pane to a new window with <code>&lt;prefix&gt; +</code>“ feature is different<br>from builtin <code>resize-pane -Z</code> as it allows you to further split a maximized<br>pane. It’s also more flexible by allowing you to maximize a pane to a new<br>window, then change window, then go back and the pane is still in maximized<br>state in its own window. You can then minimize a pane by using <code>&lt;prefix&gt; +</code><br>either from the source window or the maximized window.</p><p><img src="https://cloud.githubusercontent.com/assets/553208/9890858/ee3c0ca6-5c02-11e5-890e-05d825a46c92.gif" alt="Maximize pane"></p><p>Mouse mode allows you to set the active window, set the active pane, resize<br>panes and automatically switches to copy-mode to select text.</p><p><img src="https://cloud.githubusercontent.com/assets/553208/9890797/8dffe542-5c02-11e5-9c06-a25b452e6fcc.gif" alt="Mouse mode"></p><h2 id="Bindings"><a href="#Bindings" class="headerlink" title="Bindings"></a>Bindings</h2><p>tmux may be controlled from an attached client by using a key combination of a<br>prefix key, followed by a command key. This configuration uses <code>C-a</code> as a<br>secondary prefix while keeping <code>C-b</code> as the default prefix. In the following<br>list of key bindings:</p><ul><li><code>&lt;prefix&gt;</code> means you have to either hit <kbd>Ctrl</kbd> + <kbd>a</kbd> or <kbd>Ctrl</kbd> + <kbd>b</kbd></li><li><code>&lt;prefix&gt; c</code> means you have to hit <kbd>Ctrl</kbd> + <kbd>a</kbd> or <kbd>Ctrl</kbd> + <kbd>b</kbd> followed by <kbd>c</kbd></li><li><code>&lt;prefix&gt; C-c</code> means you have to hit <kbd>Ctrl</kbd> + <kbd>a</kbd> or <kbd>Ctrl</kbd> + <kbd>b</kbd> followed by <kbd>Ctrl</kbd> + <kbd>c</kbd></li></ul><p>This configuration uses the following bindings:</p><ul><li><p><code>&lt;prefix&gt; e</code> opens <code>~/.tmux.conf.local</code> with the editor defined by the<br><code>$EDITOR</code> environment variable (defaults to <code>vim</code> when empty)</p></li><li><p><code>&lt;prefix&gt; r</code> reloads the configuration</p></li><li><p><code>C-l</code> clears both the screen and the tmux history</p></li><li><p><code>&lt;prefix&gt; C-c</code> creates a new session</p></li><li><p><code>&lt;prefix&gt; C-f</code> lets you switch to another session by name</p></li><li><p><code>&lt;prefix&gt; C-h</code> and <code>&lt;prefix&gt; C-l</code> let you navigate windows (default<br><code>&lt;prefix&gt; n</code> and <code>&lt;prefix&gt; p</code> are unbound)</p></li><li><p><code>&lt;prefix&gt; Tab</code> brings you to the last active window</p></li><li><p><code>&lt;prefix&gt; -</code> splits the current pane vertically</p></li><li><p><code>&lt;prefix&gt; _</code> splits the current pane horizontally</p></li><li><p><code>&lt;prefix&gt; h</code>, <code>&lt;prefix&gt; j</code>, <code>&lt;prefix&gt; k</code> and <code>&lt;prefix&gt; l</code> let you navigate<br>panes ala Vim</p></li><li><p><code>&lt;prefix&gt; H</code>, <code>&lt;prefix&gt; J</code>, <code>&lt;prefix&gt; K</code>, <code>&lt;prefix&gt; L</code> let you resize panes</p></li><li><p><code>&lt;prefix&gt; &lt;</code> and <code>&lt;prefix&gt; &gt;</code> let you swap panes</p></li><li><p><code>&lt;prefix&gt; +</code> maximizes the current pane to a new window</p></li><li><p><code>&lt;prefix&gt; m</code> toggles mouse mode on or off</p></li><li><p><code>&lt;prefix&gt; U</code> launches Urlview (if available)</p></li><li><p><code>&lt;prefix&gt; F</code> launches Facebook PathPicker (if available)</p></li><li><p><code>&lt;prefix&gt; Enter</code> enters copy-mode</p></li><li><p><code>&lt;prefix&gt; b</code> lists the paste-buffers</p></li><li><p><code>&lt;prefix&gt; p</code> pastes from the top paste-buffer</p></li><li><p><code>&lt;prefix&gt; P</code> lets you choose the paste-buffer to paste from</p></li></ul><p>Additionally, <code>copy-mode-vi</code> matches <a href="https://github.com/gpakosz/.vim.git">my own Vim configuration</a></p><p>Bindings for <code>copy-mode-vi</code>:</p><ul><li><code>v</code> begins selection &#x2F; visual mode</li><li><code>C-v</code> toggles between blockwise visual mode and visual mode</li><li><code>H</code> jumps to the start of line</li><li><code>L</code> jumps to the end of line</li><li><code>y</code> copies the selection to the top paste-buffer</li><li><code>Escape</code> cancels the current operation</li></ul><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><p>While this configuration tries to bring sane default settings, you may want to<br>customize it further to your needs. Instead of altering the <code>~/.tmux.conf</code> file<br>and diverging from upstream, the proper way is to edit the <code>~/.tmux.conf.local</code><br>file.</p><p>Please refer to the default <code>~/.tmux.conf.local</code> file to know more about<br>variables you can adjust to alter different behaviors. Pressing <code>&lt;prefix&gt; e</code><br>will open <code>~/.tmux.conf.local</code> with the editor defined by the <code>$EDITOR</code><br>environment variable (defaults to <code>vim</code> when empty).</p>]]></content>
    
    
    
    <tags>
      
      <tag>tmux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>markdown ⌨️</title>
    <link href="/2023/05/28/markdown-learning/"/>
    <url>/2023/05/28/markdown-learning/</url>
    
    <content type="html"><![CDATA[<div align=center><img src="https://api.iconify.design/logos:markdown.svg" width="300" align=center></div><hr><ul><li>无序列表1</li><li>无序列表2</li></ul><hr><ol><li>有序列表1</li><li>有序列表2</li></ol><hr><ul><li><input disabled="" type="checkbox"> 看电影</li><li><input disabled="" type="checkbox"> 看小说</li><li><input disabled="" type="checkbox"> 看漫画</li></ul><hr><p><u>下划线</u></p><hr><table><thead><tr><th>a</th><th>b</th><th>c</th></tr></thead><tbody><tr><td>d</td><td>e</td><td>f</td></tr><tr><td>h</td><td>i</td><td>j</td></tr><tr><td>k</td><td>l</td><td>m</td></tr></tbody></table><hr>]]></content>
    
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpingBoot design mode</title>
    <link href="/2023/05/28/SpringBoot_Back_To_Front/"/>
    <url>/2023/05/28/SpringBoot_Back_To_Front/</url>
    
    <content type="html"><![CDATA[<p><em><strong>后端数据都是以<font color="#FC78C4">JSON</font>的形式给前端返回，一般都是通过<font color="#FC78C4">@ResponseBody</font>来进行返回。每次返回都要重新格式化一下json的格式。如果接受请求的方法多了，这种返回方式无疑是效率很低的。那么就需要一个类统一管理起来统一管理返回的格式。</strong></em></p><hr><font color="#FC78C4">可以定义一个Result类，用来专门管理返回数据的:</font><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> code<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> msg<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">T</span> data<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token class-name">T</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token string">"success"</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token class-name">CodeMsg</span> msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">CodeMsg</span> msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token class-name">T</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CodeMsg</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> code<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> msg<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">CodeMsg</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">CodeMsg</span> <span class="token function">fillArgs</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> code <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>code<span class="token punctuation">;</span>        <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CodeMsg</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">CodeMsg</span> <span class="token constant">SUCCESS</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CodeMsg</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"SUCESS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">CodeMsg</span> <span class="token constant">SERVER_ERROR</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CodeMsg</span><span class="token punctuation">(</span><span class="token number">500100</span><span class="token punctuation">,</span> <span class="token string">"服务端异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">CodeMsg</span> <span class="token constant">BIND_ERROR</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CodeMsg</span><span class="token punctuation">(</span><span class="token number">500101</span><span class="token punctuation">,</span> <span class="token string">"参数校验异常:%s"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">CodeMsg</span> <span class="token constant">PASSWORD_EMPTY</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CodeMsg</span><span class="token punctuation">(</span><span class="token number">500211</span><span class="token punctuation">,</span> <span class="token string">"密码不能为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">CodeMsg</span> <span class="token constant">MOBILE_EMPTY</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CodeMsg</span><span class="token punctuation">(</span><span class="token number">500211</span><span class="token punctuation">,</span> <span class="token string">"手机号不能为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">CodeMsg</span> <span class="token constant">MOBILE_ERROR</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CodeMsg</span><span class="token punctuation">(</span><span class="token number">500211</span><span class="token punctuation">,</span> <span class="token string">"手机号格式错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">CodeMsg</span> <span class="token constant">USER_NOT_EXITS</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CodeMsg</span><span class="token punctuation">(</span><span class="token number">500211</span><span class="token punctuation">,</span> <span class="token string">"用户不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">CodeMsg</span> <span class="token constant">PASSWORD_ERROR</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CodeMsg</span><span class="token punctuation">(</span><span class="token number">500211</span><span class="token punctuation">,</span> <span class="token string">"密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">CodeMsg</span><span class="token punctuation">.</span><span class="token constant">SERVER_ERROR</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    
    <tags>
      
      <tag>spring springboot java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
